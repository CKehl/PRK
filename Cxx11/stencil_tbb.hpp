#define RESTRICT __restrict__

template <>
struct Star<1> {
  void operator()( const tbb::blocked_range2d<int>& r ) const {
    for (tbb::blocked_range<int>::const_iterator i=r.rows().begin(); i!=r.rows().end(); ++i ) {
      for (tbb::blocked_range<int>::const_iterator j=r.cols().begin(); j!=r.cols().end(); ++j ) {
        out[i*n+j] += +in[(i+-1)*n+(j+0)] * -0.5
                      +in[(i+0)*n+(j+-1)] * -0.5
                      +in[(i+0)*n+(j+1)] * 0.5
                      +in[(i+1)*n+(j+0)] * 0.5;
       }
     }
  }

    Star(int n, std::vector<double> & in, std::vector<double> & out)
        : n(n), in(in), out(out) { }

    int n;
    std::vector<double> & in;
    std::vector<double> & out;
};

template <>
struct Star<2> {
  void operator()( const tbb::blocked_range2d<int>& r ) const {
    for (tbb::blocked_range<int>::const_iterator i=r.rows().begin(); i!=r.rows().end(); ++i ) {
      for (tbb::blocked_range<int>::const_iterator j=r.cols().begin(); j!=r.cols().end(); ++j ) {
        out[i*n+j] += +in[(i+-2)*n+(j+0)] * -0.125
                      +in[(i+-1)*n+(j+0)] * -0.25
                      +in[(i+0)*n+(j+-2)] * -0.125
                      +in[(i+0)*n+(j+-1)] * -0.25
                      +in[(i+0)*n+(j+1)] * 0.25
                      +in[(i+0)*n+(j+2)] * 0.125
                      +in[(i+1)*n+(j+0)] * 0.25
                      +in[(i+2)*n+(j+0)] * 0.125;
       }
     }
  }

    Star(int n, std::vector<double> & in, std::vector<double> & out)
        : n(n), in(in), out(out) { }

    int n;
    std::vector<double> & in;
    std::vector<double> & out;
};

template <>
struct Star<3> {
  void operator()( const tbb::blocked_range2d<int>& r ) const {
    for (tbb::blocked_range<int>::const_iterator i=r.rows().begin(); i!=r.rows().end(); ++i ) {
      for (tbb::blocked_range<int>::const_iterator j=r.cols().begin(); j!=r.cols().end(); ++j ) {
        out[i*n+j] += +in[(i+-3)*n+(j+0)] * -0.0555555555556
                      +in[(i+-2)*n+(j+0)] * -0.0833333333333
                      +in[(i+-1)*n+(j+0)] * -0.166666666667
                      +in[(i+0)*n+(j+-3)] * -0.0555555555556
                      +in[(i+0)*n+(j+-2)] * -0.0833333333333
                      +in[(i+0)*n+(j+-1)] * -0.166666666667
                      +in[(i+0)*n+(j+1)] * 0.166666666667
                      +in[(i+0)*n+(j+2)] * 0.0833333333333
                      +in[(i+0)*n+(j+3)] * 0.0555555555556
                      +in[(i+1)*n+(j+0)] * 0.166666666667
                      +in[(i+2)*n+(j+0)] * 0.0833333333333
                      +in[(i+3)*n+(j+0)] * 0.0555555555556;
       }
     }
  }

    Star(int n, std::vector<double> & in, std::vector<double> & out)
        : n(n), in(in), out(out) { }

    int n;
    std::vector<double> & in;
    std::vector<double> & out;
};

template <>
struct Star<4> {
  void operator()( const tbb::blocked_range2d<int>& r ) const {
    for (tbb::blocked_range<int>::const_iterator i=r.rows().begin(); i!=r.rows().end(); ++i ) {
      for (tbb::blocked_range<int>::const_iterator j=r.cols().begin(); j!=r.cols().end(); ++j ) {
        out[i*n+j] += +in[(i+-4)*n+(j+0)] * -0.03125
                      +in[(i+-3)*n+(j+0)] * -0.0416666666667
                      +in[(i+-2)*n+(j+0)] * -0.0625
                      +in[(i+-1)*n+(j+0)] * -0.125
                      +in[(i+0)*n+(j+-4)] * -0.03125
                      +in[(i+0)*n+(j+-3)] * -0.0416666666667
                      +in[(i+0)*n+(j+-2)] * -0.0625
                      +in[(i+0)*n+(j+-1)] * -0.125
                      +in[(i+0)*n+(j+1)] * 0.125
                      +in[(i+0)*n+(j+2)] * 0.0625
                      +in[(i+0)*n+(j+3)] * 0.0416666666667
                      +in[(i+0)*n+(j+4)] * 0.03125
                      +in[(i+1)*n+(j+0)] * 0.125
                      +in[(i+2)*n+(j+0)] * 0.0625
                      +in[(i+3)*n+(j+0)] * 0.0416666666667
                      +in[(i+4)*n+(j+0)] * 0.03125;
       }
     }
  }

    Star(int n, std::vector<double> & in, std::vector<double> & out)
        : n(n), in(in), out(out) { }

    int n;
    std::vector<double> & in;
    std::vector<double> & out;
};

template <>
struct Star<5> {
  void operator()( const tbb::blocked_range2d<int>& r ) const {
    for (tbb::blocked_range<int>::const_iterator i=r.rows().begin(); i!=r.rows().end(); ++i ) {
      for (tbb::blocked_range<int>::const_iterator j=r.cols().begin(); j!=r.cols().end(); ++j ) {
        out[i*n+j] += +in[(i+-5)*n+(j+0)] * -0.02
                      +in[(i+-4)*n+(j+0)] * -0.025
                      +in[(i+-3)*n+(j+0)] * -0.0333333333333
                      +in[(i+-2)*n+(j+0)] * -0.05
                      +in[(i+-1)*n+(j+0)] * -0.1
                      +in[(i+0)*n+(j+-5)] * -0.02
                      +in[(i+0)*n+(j+-4)] * -0.025
                      +in[(i+0)*n+(j+-3)] * -0.0333333333333
                      +in[(i+0)*n+(j+-2)] * -0.05
                      +in[(i+0)*n+(j+-1)] * -0.1
                      +in[(i+0)*n+(j+1)] * 0.1
                      +in[(i+0)*n+(j+2)] * 0.05
                      +in[(i+0)*n+(j+3)] * 0.0333333333333
                      +in[(i+0)*n+(j+4)] * 0.025
                      +in[(i+0)*n+(j+5)] * 0.02
                      +in[(i+1)*n+(j+0)] * 0.1
                      +in[(i+2)*n+(j+0)] * 0.05
                      +in[(i+3)*n+(j+0)] * 0.0333333333333
                      +in[(i+4)*n+(j+0)] * 0.025
                      +in[(i+5)*n+(j+0)] * 0.02;
       }
     }
  }

    Star(int n, std::vector<double> & in, std::vector<double> & out)
        : n(n), in(in), out(out) { }

    int n;
    std::vector<double> & in;
    std::vector<double> & out;
};

template <>
struct Star<6> {
  void operator()( const tbb::blocked_range2d<int>& r ) const {
    for (tbb::blocked_range<int>::const_iterator i=r.rows().begin(); i!=r.rows().end(); ++i ) {
      for (tbb::blocked_range<int>::const_iterator j=r.cols().begin(); j!=r.cols().end(); ++j ) {
        out[i*n+j] += +in[(i+-6)*n+(j+0)] * -0.0138888888889
                      +in[(i+-5)*n+(j+0)] * -0.0166666666667
                      +in[(i+-4)*n+(j+0)] * -0.0208333333333
                      +in[(i+-3)*n+(j+0)] * -0.0277777777778
                      +in[(i+-2)*n+(j+0)] * -0.0416666666667
                      +in[(i+-1)*n+(j+0)] * -0.0833333333333
                      +in[(i+0)*n+(j+-6)] * -0.0138888888889
                      +in[(i+0)*n+(j+-5)] * -0.0166666666667
                      +in[(i+0)*n+(j+-4)] * -0.0208333333333
                      +in[(i+0)*n+(j+-3)] * -0.0277777777778
                      +in[(i+0)*n+(j+-2)] * -0.0416666666667
                      +in[(i+0)*n+(j+-1)] * -0.0833333333333
                      +in[(i+0)*n+(j+1)] * 0.0833333333333
                      +in[(i+0)*n+(j+2)] * 0.0416666666667
                      +in[(i+0)*n+(j+3)] * 0.0277777777778
                      +in[(i+0)*n+(j+4)] * 0.0208333333333
                      +in[(i+0)*n+(j+5)] * 0.0166666666667
                      +in[(i+0)*n+(j+6)] * 0.0138888888889
                      +in[(i+1)*n+(j+0)] * 0.0833333333333
                      +in[(i+2)*n+(j+0)] * 0.0416666666667
                      +in[(i+3)*n+(j+0)] * 0.0277777777778
                      +in[(i+4)*n+(j+0)] * 0.0208333333333
                      +in[(i+5)*n+(j+0)] * 0.0166666666667
                      +in[(i+6)*n+(j+0)] * 0.0138888888889;
       }
     }
  }

    Star(int n, std::vector<double> & in, std::vector<double> & out)
        : n(n), in(in), out(out) { }

    int n;
    std::vector<double> & in;
    std::vector<double> & out;
};

template <>
struct Star<7> {
  void operator()( const tbb::blocked_range2d<int>& r ) const {
    for (tbb::blocked_range<int>::const_iterator i=r.rows().begin(); i!=r.rows().end(); ++i ) {
      for (tbb::blocked_range<int>::const_iterator j=r.cols().begin(); j!=r.cols().end(); ++j ) {
        out[i*n+j] += +in[(i+-7)*n+(j+0)] * -0.0102040816327
                      +in[(i+-6)*n+(j+0)] * -0.0119047619048
                      +in[(i+-5)*n+(j+0)] * -0.0142857142857
                      +in[(i+-4)*n+(j+0)] * -0.0178571428571
                      +in[(i+-3)*n+(j+0)] * -0.0238095238095
                      +in[(i+-2)*n+(j+0)] * -0.0357142857143
                      +in[(i+-1)*n+(j+0)] * -0.0714285714286
                      +in[(i+0)*n+(j+-7)] * -0.0102040816327
                      +in[(i+0)*n+(j+-6)] * -0.0119047619048
                      +in[(i+0)*n+(j+-5)] * -0.0142857142857
                      +in[(i+0)*n+(j+-4)] * -0.0178571428571
                      +in[(i+0)*n+(j+-3)] * -0.0238095238095
                      +in[(i+0)*n+(j+-2)] * -0.0357142857143
                      +in[(i+0)*n+(j+-1)] * -0.0714285714286
                      +in[(i+0)*n+(j+1)] * 0.0714285714286
                      +in[(i+0)*n+(j+2)] * 0.0357142857143
                      +in[(i+0)*n+(j+3)] * 0.0238095238095
                      +in[(i+0)*n+(j+4)] * 0.0178571428571
                      +in[(i+0)*n+(j+5)] * 0.0142857142857
                      +in[(i+0)*n+(j+6)] * 0.0119047619048
                      +in[(i+0)*n+(j+7)] * 0.0102040816327
                      +in[(i+1)*n+(j+0)] * 0.0714285714286
                      +in[(i+2)*n+(j+0)] * 0.0357142857143
                      +in[(i+3)*n+(j+0)] * 0.0238095238095
                      +in[(i+4)*n+(j+0)] * 0.0178571428571
                      +in[(i+5)*n+(j+0)] * 0.0142857142857
                      +in[(i+6)*n+(j+0)] * 0.0119047619048
                      +in[(i+7)*n+(j+0)] * 0.0102040816327;
       }
     }
  }

    Star(int n, std::vector<double> & in, std::vector<double> & out)
        : n(n), in(in), out(out) { }

    int n;
    std::vector<double> & in;
    std::vector<double> & out;
};

template <>
struct Star<8> {
  void operator()( const tbb::blocked_range2d<int>& r ) const {
    for (tbb::blocked_range<int>::const_iterator i=r.rows().begin(); i!=r.rows().end(); ++i ) {
      for (tbb::blocked_range<int>::const_iterator j=r.cols().begin(); j!=r.cols().end(); ++j ) {
        out[i*n+j] += +in[(i+-8)*n+(j+0)] * -0.0078125
                      +in[(i+-7)*n+(j+0)] * -0.00892857142857
                      +in[(i+-6)*n+(j+0)] * -0.0104166666667
                      +in[(i+-5)*n+(j+0)] * -0.0125
                      +in[(i+-4)*n+(j+0)] * -0.015625
                      +in[(i+-3)*n+(j+0)] * -0.0208333333333
                      +in[(i+-2)*n+(j+0)] * -0.03125
                      +in[(i+-1)*n+(j+0)] * -0.0625
                      +in[(i+0)*n+(j+-8)] * -0.0078125
                      +in[(i+0)*n+(j+-7)] * -0.00892857142857
                      +in[(i+0)*n+(j+-6)] * -0.0104166666667
                      +in[(i+0)*n+(j+-5)] * -0.0125
                      +in[(i+0)*n+(j+-4)] * -0.015625
                      +in[(i+0)*n+(j+-3)] * -0.0208333333333
                      +in[(i+0)*n+(j+-2)] * -0.03125
                      +in[(i+0)*n+(j+-1)] * -0.0625
                      +in[(i+0)*n+(j+1)] * 0.0625
                      +in[(i+0)*n+(j+2)] * 0.03125
                      +in[(i+0)*n+(j+3)] * 0.0208333333333
                      +in[(i+0)*n+(j+4)] * 0.015625
                      +in[(i+0)*n+(j+5)] * 0.0125
                      +in[(i+0)*n+(j+6)] * 0.0104166666667
                      +in[(i+0)*n+(j+7)] * 0.00892857142857
                      +in[(i+0)*n+(j+8)] * 0.0078125
                      +in[(i+1)*n+(j+0)] * 0.0625
                      +in[(i+2)*n+(j+0)] * 0.03125
                      +in[(i+3)*n+(j+0)] * 0.0208333333333
                      +in[(i+4)*n+(j+0)] * 0.015625
                      +in[(i+5)*n+(j+0)] * 0.0125
                      +in[(i+6)*n+(j+0)] * 0.0104166666667
                      +in[(i+7)*n+(j+0)] * 0.00892857142857
                      +in[(i+8)*n+(j+0)] * 0.0078125;
       }
     }
  }

    Star(int n, std::vector<double> & in, std::vector<double> & out)
        : n(n), in(in), out(out) { }

    int n;
    std::vector<double> & in;
    std::vector<double> & out;
};

template <>
struct Star<9> {
  void operator()( const tbb::blocked_range2d<int>& r ) const {
    for (tbb::blocked_range<int>::const_iterator i=r.rows().begin(); i!=r.rows().end(); ++i ) {
      for (tbb::blocked_range<int>::const_iterator j=r.cols().begin(); j!=r.cols().end(); ++j ) {
        out[i*n+j] += +in[(i+-9)*n+(j+0)] * -0.00617283950617
                      +in[(i+-8)*n+(j+0)] * -0.00694444444444
                      +in[(i+-7)*n+(j+0)] * -0.00793650793651
                      +in[(i+-6)*n+(j+0)] * -0.00925925925926
                      +in[(i+-5)*n+(j+0)] * -0.0111111111111
                      +in[(i+-4)*n+(j+0)] * -0.0138888888889
                      +in[(i+-3)*n+(j+0)] * -0.0185185185185
                      +in[(i+-2)*n+(j+0)] * -0.0277777777778
                      +in[(i+-1)*n+(j+0)] * -0.0555555555556
                      +in[(i+0)*n+(j+-9)] * -0.00617283950617
                      +in[(i+0)*n+(j+-8)] * -0.00694444444444
                      +in[(i+0)*n+(j+-7)] * -0.00793650793651
                      +in[(i+0)*n+(j+-6)] * -0.00925925925926
                      +in[(i+0)*n+(j+-5)] * -0.0111111111111
                      +in[(i+0)*n+(j+-4)] * -0.0138888888889
                      +in[(i+0)*n+(j+-3)] * -0.0185185185185
                      +in[(i+0)*n+(j+-2)] * -0.0277777777778
                      +in[(i+0)*n+(j+-1)] * -0.0555555555556
                      +in[(i+0)*n+(j+1)] * 0.0555555555556
                      +in[(i+0)*n+(j+2)] * 0.0277777777778
                      +in[(i+0)*n+(j+3)] * 0.0185185185185
                      +in[(i+0)*n+(j+4)] * 0.0138888888889
                      +in[(i+0)*n+(j+5)] * 0.0111111111111
                      +in[(i+0)*n+(j+6)] * 0.00925925925926
                      +in[(i+0)*n+(j+7)] * 0.00793650793651
                      +in[(i+0)*n+(j+8)] * 0.00694444444444
                      +in[(i+0)*n+(j+9)] * 0.00617283950617
                      +in[(i+1)*n+(j+0)] * 0.0555555555556
                      +in[(i+2)*n+(j+0)] * 0.0277777777778
                      +in[(i+3)*n+(j+0)] * 0.0185185185185
                      +in[(i+4)*n+(j+0)] * 0.0138888888889
                      +in[(i+5)*n+(j+0)] * 0.0111111111111
                      +in[(i+6)*n+(j+0)] * 0.00925925925926
                      +in[(i+7)*n+(j+0)] * 0.00793650793651
                      +in[(i+8)*n+(j+0)] * 0.00694444444444
                      +in[(i+9)*n+(j+0)] * 0.00617283950617;
       }
     }
  }

    Star(int n, std::vector<double> & in, std::vector<double> & out)
        : n(n), in(in), out(out) { }

    int n;
    std::vector<double> & in;
    std::vector<double> & out;
};

template <>
struct Grid<1> {
  void operator()( const tbb::blocked_range2d<int>& r ) const {
    for (tbb::blocked_range<int>::const_iterator i=r.rows().begin(); i!=r.rows().end(); ++i ) {
      for (tbb::blocked_range<int>::const_iterator j=r.cols().begin(); j!=r.cols().end(); ++j ) {
        out[i*n+j] += +in[(i+-1)*n+(j+-1)] * -0.25
                      +in[(i+-1)*n+(j+0)] * -0.25
                      +in[(i+0)*n+(j+-1)] * -0.25
                      +in[(i+0)*n+(j+1)] * 0.25
                      +in[(i+1)*n+(j+0)] * 0.25
                      +in[(i+1)*n+(j+1)] * 0.25
                      ;
       }
     }
  }

    Grid(int n, std::vector<double> & in, std::vector<double> & out)
        : n(n), in(in), out(out) { }

    int n;
    std::vector<double> & in;
    std::vector<double> & out;
};

template <>
struct Grid<2> {
  void operator()( const tbb::blocked_range2d<int>& r ) const {
    for (tbb::blocked_range<int>::const_iterator i=r.rows().begin(); i!=r.rows().end(); ++i ) {
      for (tbb::blocked_range<int>::const_iterator j=r.cols().begin(); j!=r.cols().end(); ++j ) {
        out[i*n+j] += +in[(i+-2)*n+(j+-2)] * -0.0625
                      +in[(i+-2)*n+(j+-1)] * -0.0208333333333
                      +in[(i+-2)*n+(j+0)] * -0.0208333333333
                      +in[(i+-2)*n+(j+1)] * -0.0208333333333
                      +in[(i+-1)*n+(j+-2)] * -0.0208333333333
                      +in[(i+-1)*n+(j+-1)] * -0.125
                      +in[(i+-1)*n+(j+0)] * -0.125
                      +in[(i+-1)*n+(j+2)] * 0.0208333333333
                      +in[(i+0)*n+(j+-2)] * -0.0208333333333
                      +in[(i+0)*n+(j+-1)] * -0.125
                      +in[(i+0)*n+(j+1)] * 0.125
                      +in[(i+0)*n+(j+2)] * 0.0208333333333
                      +in[(i+1)*n+(j+-2)] * -0.0208333333333
                      +in[(i+1)*n+(j+0)] * 0.125
                      +in[(i+1)*n+(j+1)] * 0.125
                      +in[(i+1)*n+(j+2)] * 0.0208333333333
                      +in[(i+2)*n+(j+-1)] * 0.0208333333333
                      +in[(i+2)*n+(j+0)] * 0.0208333333333
                      +in[(i+2)*n+(j+1)] * 0.0208333333333
                      +in[(i+2)*n+(j+2)] * 0.0625
                      ;
       }
     }
  }

    Grid(int n, std::vector<double> & in, std::vector<double> & out)
        : n(n), in(in), out(out) { }

    int n;
    std::vector<double> & in;
    std::vector<double> & out;
};

template <>
struct Grid<3> {
  void operator()( const tbb::blocked_range2d<int>& r ) const {
    for (tbb::blocked_range<int>::const_iterator i=r.rows().begin(); i!=r.rows().end(); ++i ) {
      for (tbb::blocked_range<int>::const_iterator j=r.cols().begin(); j!=r.cols().end(); ++j ) {
        out[i*n+j] += +in[(i+-3)*n+(j+-3)] * -0.0277777777778
                      +in[(i+-3)*n+(j+-2)] * -0.00555555555556
                      +in[(i+-3)*n+(j+-1)] * -0.00555555555556
                      +in[(i+-3)*n+(j+0)] * -0.00555555555556
                      +in[(i+-3)*n+(j+1)] * -0.00555555555556
                      +in[(i+-3)*n+(j+2)] * -0.00555555555556
                      +in[(i+-2)*n+(j+-3)] * -0.00555555555556
                      +in[(i+-2)*n+(j+-2)] * -0.0416666666667
                      +in[(i+-2)*n+(j+-1)] * -0.0138888888889
                      +in[(i+-2)*n+(j+0)] * -0.0138888888889
                      +in[(i+-2)*n+(j+1)] * -0.0138888888889
                      +in[(i+-2)*n+(j+3)] * 0.00555555555556
                      +in[(i+-1)*n+(j+-3)] * -0.00555555555556
                      +in[(i+-1)*n+(j+-2)] * -0.0138888888889
                      +in[(i+-1)*n+(j+-1)] * -0.0833333333333
                      +in[(i+-1)*n+(j+0)] * -0.0833333333333
                      +in[(i+-1)*n+(j+2)] * 0.0138888888889
                      +in[(i+-1)*n+(j+3)] * 0.00555555555556
                      +in[(i+0)*n+(j+-3)] * -0.00555555555556
                      +in[(i+0)*n+(j+-2)] * -0.0138888888889
                      +in[(i+0)*n+(j+-1)] * -0.0833333333333
                      +in[(i+0)*n+(j+1)] * 0.0833333333333
                      +in[(i+0)*n+(j+2)] * 0.0138888888889
                      +in[(i+0)*n+(j+3)] * 0.00555555555556
                      +in[(i+1)*n+(j+-3)] * -0.00555555555556
                      +in[(i+1)*n+(j+-2)] * -0.0138888888889
                      +in[(i+1)*n+(j+0)] * 0.0833333333333
                      +in[(i+1)*n+(j+1)] * 0.0833333333333
                      +in[(i+1)*n+(j+2)] * 0.0138888888889
                      +in[(i+1)*n+(j+3)] * 0.00555555555556
                      +in[(i+2)*n+(j+-3)] * -0.00555555555556
                      +in[(i+2)*n+(j+-1)] * 0.0138888888889
                      +in[(i+2)*n+(j+0)] * 0.0138888888889
                      +in[(i+2)*n+(j+1)] * 0.0138888888889
                      +in[(i+2)*n+(j+2)] * 0.0416666666667
                      +in[(i+2)*n+(j+3)] * 0.00555555555556
                      +in[(i+3)*n+(j+-2)] * 0.00555555555556
                      +in[(i+3)*n+(j+-1)] * 0.00555555555556
                      +in[(i+3)*n+(j+0)] * 0.00555555555556
                      +in[(i+3)*n+(j+1)] * 0.00555555555556
                      +in[(i+3)*n+(j+2)] * 0.00555555555556
                      +in[(i+3)*n+(j+3)] * 0.0277777777778
                      ;
       }
     }
  }

    Grid(int n, std::vector<double> & in, std::vector<double> & out)
        : n(n), in(in), out(out) { }

    int n;
    std::vector<double> & in;
    std::vector<double> & out;
};

template <>
struct Grid<4> {
  void operator()( const tbb::blocked_range2d<int>& r ) const {
    for (tbb::blocked_range<int>::const_iterator i=r.rows().begin(); i!=r.rows().end(); ++i ) {
      for (tbb::blocked_range<int>::const_iterator j=r.cols().begin(); j!=r.cols().end(); ++j ) {
        out[i*n+j] += +in[(i+-4)*n+(j+-4)] * -0.015625
                      +in[(i+-4)*n+(j+-3)] * -0.00223214285714
                      +in[(i+-4)*n+(j+-2)] * -0.00223214285714
                      +in[(i+-4)*n+(j+-1)] * -0.00223214285714
                      +in[(i+-4)*n+(j+0)] * -0.00223214285714
                      +in[(i+-4)*n+(j+1)] * -0.00223214285714
                      +in[(i+-4)*n+(j+2)] * -0.00223214285714
                      +in[(i+-4)*n+(j+3)] * -0.00223214285714
                      +in[(i+-3)*n+(j+-4)] * -0.00223214285714
                      +in[(i+-3)*n+(j+-3)] * -0.0208333333333
                      +in[(i+-3)*n+(j+-2)] * -0.00416666666667
                      +in[(i+-3)*n+(j+-1)] * -0.00416666666667
                      +in[(i+-3)*n+(j+0)] * -0.00416666666667
                      +in[(i+-3)*n+(j+1)] * -0.00416666666667
                      +in[(i+-3)*n+(j+2)] * -0.00416666666667
                      +in[(i+-3)*n+(j+4)] * 0.00223214285714
                      +in[(i+-2)*n+(j+-4)] * -0.00223214285714
                      +in[(i+-2)*n+(j+-3)] * -0.00416666666667
                      +in[(i+-2)*n+(j+-2)] * -0.03125
                      +in[(i+-2)*n+(j+-1)] * -0.0104166666667
                      +in[(i+-2)*n+(j+0)] * -0.0104166666667
                      +in[(i+-2)*n+(j+1)] * -0.0104166666667
                      +in[(i+-2)*n+(j+3)] * 0.00416666666667
                      +in[(i+-2)*n+(j+4)] * 0.00223214285714
                      +in[(i+-1)*n+(j+-4)] * -0.00223214285714
                      +in[(i+-1)*n+(j+-3)] * -0.00416666666667
                      +in[(i+-1)*n+(j+-2)] * -0.0104166666667
                      +in[(i+-1)*n+(j+-1)] * -0.0625
                      +in[(i+-1)*n+(j+0)] * -0.0625
                      +in[(i+-1)*n+(j+2)] * 0.0104166666667
                      +in[(i+-1)*n+(j+3)] * 0.00416666666667
                      +in[(i+-1)*n+(j+4)] * 0.00223214285714
                      +in[(i+0)*n+(j+-4)] * -0.00223214285714
                      +in[(i+0)*n+(j+-3)] * -0.00416666666667
                      +in[(i+0)*n+(j+-2)] * -0.0104166666667
                      +in[(i+0)*n+(j+-1)] * -0.0625
                      +in[(i+0)*n+(j+1)] * 0.0625
                      +in[(i+0)*n+(j+2)] * 0.0104166666667
                      +in[(i+0)*n+(j+3)] * 0.00416666666667
                      +in[(i+0)*n+(j+4)] * 0.00223214285714
                      +in[(i+1)*n+(j+-4)] * -0.00223214285714
                      +in[(i+1)*n+(j+-3)] * -0.00416666666667
                      +in[(i+1)*n+(j+-2)] * -0.0104166666667
                      +in[(i+1)*n+(j+0)] * 0.0625
                      +in[(i+1)*n+(j+1)] * 0.0625
                      +in[(i+1)*n+(j+2)] * 0.0104166666667
                      +in[(i+1)*n+(j+3)] * 0.00416666666667
                      +in[(i+1)*n+(j+4)] * 0.00223214285714
                      +in[(i+2)*n+(j+-4)] * -0.00223214285714
                      +in[(i+2)*n+(j+-3)] * -0.00416666666667
                      +in[(i+2)*n+(j+-1)] * 0.0104166666667
                      +in[(i+2)*n+(j+0)] * 0.0104166666667
                      +in[(i+2)*n+(j+1)] * 0.0104166666667
                      +in[(i+2)*n+(j+2)] * 0.03125
                      +in[(i+2)*n+(j+3)] * 0.00416666666667
                      +in[(i+2)*n+(j+4)] * 0.00223214285714
                      +in[(i+3)*n+(j+-4)] * -0.00223214285714
                      +in[(i+3)*n+(j+-2)] * 0.00416666666667
                      +in[(i+3)*n+(j+-1)] * 0.00416666666667
                      +in[(i+3)*n+(j+0)] * 0.00416666666667
                      +in[(i+3)*n+(j+1)] * 0.00416666666667
                      +in[(i+3)*n+(j+2)] * 0.00416666666667
                      +in[(i+3)*n+(j+3)] * 0.0208333333333
                      +in[(i+3)*n+(j+4)] * 0.00223214285714
                      +in[(i+4)*n+(j+-3)] * 0.00223214285714
                      +in[(i+4)*n+(j+-2)] * 0.00223214285714
                      +in[(i+4)*n+(j+-1)] * 0.00223214285714
                      +in[(i+4)*n+(j+0)] * 0.00223214285714
                      +in[(i+4)*n+(j+1)] * 0.00223214285714
                      +in[(i+4)*n+(j+2)] * 0.00223214285714
                      +in[(i+4)*n+(j+3)] * 0.00223214285714
                      +in[(i+4)*n+(j+4)] * 0.015625
                      ;
       }
     }
  }

    Grid(int n, std::vector<double> & in, std::vector<double> & out)
        : n(n), in(in), out(out) { }

    int n;
    std::vector<double> & in;
    std::vector<double> & out;
};

template <>
struct Grid<5> {
  void operator()( const tbb::blocked_range2d<int>& r ) const {
    for (tbb::blocked_range<int>::const_iterator i=r.rows().begin(); i!=r.rows().end(); ++i ) {
      for (tbb::blocked_range<int>::const_iterator j=r.cols().begin(); j!=r.cols().end(); ++j ) {
        out[i*n+j] += +in[(i+-5)*n+(j+-5)] * -0.01
                      +in[(i+-5)*n+(j+-4)] * -0.00111111111111
                      +in[(i+-5)*n+(j+-3)] * -0.00111111111111
                      +in[(i+-5)*n+(j+-2)] * -0.00111111111111
                      +in[(i+-5)*n+(j+-1)] * -0.00111111111111
                      +in[(i+-5)*n+(j+0)] * -0.00111111111111
                      +in[(i+-5)*n+(j+1)] * -0.00111111111111
                      +in[(i+-5)*n+(j+2)] * -0.00111111111111
                      +in[(i+-5)*n+(j+3)] * -0.00111111111111
                      +in[(i+-5)*n+(j+4)] * -0.00111111111111
                      +in[(i+-4)*n+(j+-5)] * -0.00111111111111
                      +in[(i+-4)*n+(j+-4)] * -0.0125
                      +in[(i+-4)*n+(j+-3)] * -0.00178571428571
                      +in[(i+-4)*n+(j+-2)] * -0.00178571428571
                      +in[(i+-4)*n+(j+-1)] * -0.00178571428571
                      +in[(i+-4)*n+(j+0)] * -0.00178571428571
                      +in[(i+-4)*n+(j+1)] * -0.00178571428571
                      +in[(i+-4)*n+(j+2)] * -0.00178571428571
                      +in[(i+-4)*n+(j+3)] * -0.00178571428571
                      +in[(i+-4)*n+(j+5)] * 0.00111111111111
                      +in[(i+-3)*n+(j+-5)] * -0.00111111111111
                      +in[(i+-3)*n+(j+-4)] * -0.00178571428571
                      +in[(i+-3)*n+(j+-3)] * -0.0166666666667
                      +in[(i+-3)*n+(j+-2)] * -0.00333333333333
                      +in[(i+-3)*n+(j+-1)] * -0.00333333333333
                      +in[(i+-3)*n+(j+0)] * -0.00333333333333
                      +in[(i+-3)*n+(j+1)] * -0.00333333333333
                      +in[(i+-3)*n+(j+2)] * -0.00333333333333
                      +in[(i+-3)*n+(j+4)] * 0.00178571428571
                      +in[(i+-3)*n+(j+5)] * 0.00111111111111
                      +in[(i+-2)*n+(j+-5)] * -0.00111111111111
                      +in[(i+-2)*n+(j+-4)] * -0.00178571428571
                      +in[(i+-2)*n+(j+-3)] * -0.00333333333333
                      +in[(i+-2)*n+(j+-2)] * -0.025
                      +in[(i+-2)*n+(j+-1)] * -0.00833333333333
                      +in[(i+-2)*n+(j+0)] * -0.00833333333333
                      +in[(i+-2)*n+(j+1)] * -0.00833333333333
                      +in[(i+-2)*n+(j+3)] * 0.00333333333333
                      +in[(i+-2)*n+(j+4)] * 0.00178571428571
                      +in[(i+-2)*n+(j+5)] * 0.00111111111111
                      +in[(i+-1)*n+(j+-5)] * -0.00111111111111
                      +in[(i+-1)*n+(j+-4)] * -0.00178571428571
                      +in[(i+-1)*n+(j+-3)] * -0.00333333333333
                      +in[(i+-1)*n+(j+-2)] * -0.00833333333333
                      +in[(i+-1)*n+(j+-1)] * -0.05
                      +in[(i+-1)*n+(j+0)] * -0.05
                      +in[(i+-1)*n+(j+2)] * 0.00833333333333
                      +in[(i+-1)*n+(j+3)] * 0.00333333333333
                      +in[(i+-1)*n+(j+4)] * 0.00178571428571
                      +in[(i+-1)*n+(j+5)] * 0.00111111111111
                      +in[(i+0)*n+(j+-5)] * -0.00111111111111
                      +in[(i+0)*n+(j+-4)] * -0.00178571428571
                      +in[(i+0)*n+(j+-3)] * -0.00333333333333
                      +in[(i+0)*n+(j+-2)] * -0.00833333333333
                      +in[(i+0)*n+(j+-1)] * -0.05
                      +in[(i+0)*n+(j+1)] * 0.05
                      +in[(i+0)*n+(j+2)] * 0.00833333333333
                      +in[(i+0)*n+(j+3)] * 0.00333333333333
                      +in[(i+0)*n+(j+4)] * 0.00178571428571
                      +in[(i+0)*n+(j+5)] * 0.00111111111111
                      +in[(i+1)*n+(j+-5)] * -0.00111111111111
                      +in[(i+1)*n+(j+-4)] * -0.00178571428571
                      +in[(i+1)*n+(j+-3)] * -0.00333333333333
                      +in[(i+1)*n+(j+-2)] * -0.00833333333333
                      +in[(i+1)*n+(j+0)] * 0.05
                      +in[(i+1)*n+(j+1)] * 0.05
                      +in[(i+1)*n+(j+2)] * 0.00833333333333
                      +in[(i+1)*n+(j+3)] * 0.00333333333333
                      +in[(i+1)*n+(j+4)] * 0.00178571428571
                      +in[(i+1)*n+(j+5)] * 0.00111111111111
                      +in[(i+2)*n+(j+-5)] * -0.00111111111111
                      +in[(i+2)*n+(j+-4)] * -0.00178571428571
                      +in[(i+2)*n+(j+-3)] * -0.00333333333333
                      +in[(i+2)*n+(j+-1)] * 0.00833333333333
                      +in[(i+2)*n+(j+0)] * 0.00833333333333
                      +in[(i+2)*n+(j+1)] * 0.00833333333333
                      +in[(i+2)*n+(j+2)] * 0.025
                      +in[(i+2)*n+(j+3)] * 0.00333333333333
                      +in[(i+2)*n+(j+4)] * 0.00178571428571
                      +in[(i+2)*n+(j+5)] * 0.00111111111111
                      +in[(i+3)*n+(j+-5)] * -0.00111111111111
                      +in[(i+3)*n+(j+-4)] * -0.00178571428571
                      +in[(i+3)*n+(j+-2)] * 0.00333333333333
                      +in[(i+3)*n+(j+-1)] * 0.00333333333333
                      +in[(i+3)*n+(j+0)] * 0.00333333333333
                      +in[(i+3)*n+(j+1)] * 0.00333333333333
                      +in[(i+3)*n+(j+2)] * 0.00333333333333
                      +in[(i+3)*n+(j+3)] * 0.0166666666667
                      +in[(i+3)*n+(j+4)] * 0.00178571428571
                      +in[(i+3)*n+(j+5)] * 0.00111111111111
                      +in[(i+4)*n+(j+-5)] * -0.00111111111111
                      +in[(i+4)*n+(j+-3)] * 0.00178571428571
                      +in[(i+4)*n+(j+-2)] * 0.00178571428571
                      +in[(i+4)*n+(j+-1)] * 0.00178571428571
                      +in[(i+4)*n+(j+0)] * 0.00178571428571
                      +in[(i+4)*n+(j+1)] * 0.00178571428571
                      +in[(i+4)*n+(j+2)] * 0.00178571428571
                      +in[(i+4)*n+(j+3)] * 0.00178571428571
                      +in[(i+4)*n+(j+4)] * 0.0125
                      +in[(i+4)*n+(j+5)] * 0.00111111111111
                      +in[(i+5)*n+(j+-4)] * 0.00111111111111
                      +in[(i+5)*n+(j+-3)] * 0.00111111111111
                      +in[(i+5)*n+(j+-2)] * 0.00111111111111
                      +in[(i+5)*n+(j+-1)] * 0.00111111111111
                      +in[(i+5)*n+(j+0)] * 0.00111111111111
                      +in[(i+5)*n+(j+1)] * 0.00111111111111
                      +in[(i+5)*n+(j+2)] * 0.00111111111111
                      +in[(i+5)*n+(j+3)] * 0.00111111111111
                      +in[(i+5)*n+(j+4)] * 0.00111111111111
                      +in[(i+5)*n+(j+5)] * 0.01
                      ;
       }
     }
  }

    Grid(int n, std::vector<double> & in, std::vector<double> & out)
        : n(n), in(in), out(out) { }

    int n;
    std::vector<double> & in;
    std::vector<double> & out;
};

template <>
struct Grid<6> {
  void operator()( const tbb::blocked_range2d<int>& r ) const {
    for (tbb::blocked_range<int>::const_iterator i=r.rows().begin(); i!=r.rows().end(); ++i ) {
      for (tbb::blocked_range<int>::const_iterator j=r.cols().begin(); j!=r.cols().end(); ++j ) {
        out[i*n+j] += +in[(i+-6)*n+(j+-6)] * -0.00694444444444
                      +in[(i+-6)*n+(j+-5)] * -0.000631313131313
                      +in[(i+-6)*n+(j+-4)] * -0.000631313131313
                      +in[(i+-6)*n+(j+-3)] * -0.000631313131313
                      +in[(i+-6)*n+(j+-2)] * -0.000631313131313
                      +in[(i+-6)*n+(j+-1)] * -0.000631313131313
                      +in[(i+-6)*n+(j+0)] * -0.000631313131313
                      +in[(i+-6)*n+(j+1)] * -0.000631313131313
                      +in[(i+-6)*n+(j+2)] * -0.000631313131313
                      +in[(i+-6)*n+(j+3)] * -0.000631313131313
                      +in[(i+-6)*n+(j+4)] * -0.000631313131313
                      +in[(i+-6)*n+(j+5)] * -0.000631313131313
                      +in[(i+-5)*n+(j+-6)] * -0.000631313131313
                      +in[(i+-5)*n+(j+-5)] * -0.00833333333333
                      +in[(i+-5)*n+(j+-4)] * -0.000925925925926
                      +in[(i+-5)*n+(j+-3)] * -0.000925925925926
                      +in[(i+-5)*n+(j+-2)] * -0.000925925925926
                      +in[(i+-5)*n+(j+-1)] * -0.000925925925926
                      +in[(i+-5)*n+(j+0)] * -0.000925925925926
                      +in[(i+-5)*n+(j+1)] * -0.000925925925926
                      +in[(i+-5)*n+(j+2)] * -0.000925925925926
                      +in[(i+-5)*n+(j+3)] * -0.000925925925926
                      +in[(i+-5)*n+(j+4)] * -0.000925925925926
                      +in[(i+-5)*n+(j+6)] * 0.000631313131313
                      +in[(i+-4)*n+(j+-6)] * -0.000631313131313
                      +in[(i+-4)*n+(j+-5)] * -0.000925925925926
                      +in[(i+-4)*n+(j+-4)] * -0.0104166666667
                      +in[(i+-4)*n+(j+-3)] * -0.0014880952381
                      +in[(i+-4)*n+(j+-2)] * -0.0014880952381
                      +in[(i+-4)*n+(j+-1)] * -0.0014880952381
                      +in[(i+-4)*n+(j+0)] * -0.0014880952381
                      +in[(i+-4)*n+(j+1)] * -0.0014880952381
                      +in[(i+-4)*n+(j+2)] * -0.0014880952381
                      +in[(i+-4)*n+(j+3)] * -0.0014880952381
                      +in[(i+-4)*n+(j+5)] * 0.000925925925926
                      +in[(i+-4)*n+(j+6)] * 0.000631313131313
                      +in[(i+-3)*n+(j+-6)] * -0.000631313131313
                      +in[(i+-3)*n+(j+-5)] * -0.000925925925926
                      +in[(i+-3)*n+(j+-4)] * -0.0014880952381
                      +in[(i+-3)*n+(j+-3)] * -0.0138888888889
                      +in[(i+-3)*n+(j+-2)] * -0.00277777777778
                      +in[(i+-3)*n+(j+-1)] * -0.00277777777778
                      +in[(i+-3)*n+(j+0)] * -0.00277777777778
                      +in[(i+-3)*n+(j+1)] * -0.00277777777778
                      +in[(i+-3)*n+(j+2)] * -0.00277777777778
                      +in[(i+-3)*n+(j+4)] * 0.0014880952381
                      +in[(i+-3)*n+(j+5)] * 0.000925925925926
                      +in[(i+-3)*n+(j+6)] * 0.000631313131313
                      +in[(i+-2)*n+(j+-6)] * -0.000631313131313
                      +in[(i+-2)*n+(j+-5)] * -0.000925925925926
                      +in[(i+-2)*n+(j+-4)] * -0.0014880952381
                      +in[(i+-2)*n+(j+-3)] * -0.00277777777778
                      +in[(i+-2)*n+(j+-2)] * -0.0208333333333
                      +in[(i+-2)*n+(j+-1)] * -0.00694444444444
                      +in[(i+-2)*n+(j+0)] * -0.00694444444444
                      +in[(i+-2)*n+(j+1)] * -0.00694444444444
                      +in[(i+-2)*n+(j+3)] * 0.00277777777778
                      +in[(i+-2)*n+(j+4)] * 0.0014880952381
                      +in[(i+-2)*n+(j+5)] * 0.000925925925926
                      +in[(i+-2)*n+(j+6)] * 0.000631313131313
                      +in[(i+-1)*n+(j+-6)] * -0.000631313131313
                      +in[(i+-1)*n+(j+-5)] * -0.000925925925926
                      +in[(i+-1)*n+(j+-4)] * -0.0014880952381
                      +in[(i+-1)*n+(j+-3)] * -0.00277777777778
                      +in[(i+-1)*n+(j+-2)] * -0.00694444444444
                      +in[(i+-1)*n+(j+-1)] * -0.0416666666667
                      +in[(i+-1)*n+(j+0)] * -0.0416666666667
                      +in[(i+-1)*n+(j+2)] * 0.00694444444444
                      +in[(i+-1)*n+(j+3)] * 0.00277777777778
                      +in[(i+-1)*n+(j+4)] * 0.0014880952381
                      +in[(i+-1)*n+(j+5)] * 0.000925925925926
                      +in[(i+-1)*n+(j+6)] * 0.000631313131313
                      +in[(i+0)*n+(j+-6)] * -0.000631313131313
                      +in[(i+0)*n+(j+-5)] * -0.000925925925926
                      +in[(i+0)*n+(j+-4)] * -0.0014880952381
                      +in[(i+0)*n+(j+-3)] * -0.00277777777778
                      +in[(i+0)*n+(j+-2)] * -0.00694444444444
                      +in[(i+0)*n+(j+-1)] * -0.0416666666667
                      +in[(i+0)*n+(j+1)] * 0.0416666666667
                      +in[(i+0)*n+(j+2)] * 0.00694444444444
                      +in[(i+0)*n+(j+3)] * 0.00277777777778
                      +in[(i+0)*n+(j+4)] * 0.0014880952381
                      +in[(i+0)*n+(j+5)] * 0.000925925925926
                      +in[(i+0)*n+(j+6)] * 0.000631313131313
                      +in[(i+1)*n+(j+-6)] * -0.000631313131313
                      +in[(i+1)*n+(j+-5)] * -0.000925925925926
                      +in[(i+1)*n+(j+-4)] * -0.0014880952381
                      +in[(i+1)*n+(j+-3)] * -0.00277777777778
                      +in[(i+1)*n+(j+-2)] * -0.00694444444444
                      +in[(i+1)*n+(j+0)] * 0.0416666666667
                      +in[(i+1)*n+(j+1)] * 0.0416666666667
                      +in[(i+1)*n+(j+2)] * 0.00694444444444
                      +in[(i+1)*n+(j+3)] * 0.00277777777778
                      +in[(i+1)*n+(j+4)] * 0.0014880952381
                      +in[(i+1)*n+(j+5)] * 0.000925925925926
                      +in[(i+1)*n+(j+6)] * 0.000631313131313
                      +in[(i+2)*n+(j+-6)] * -0.000631313131313
                      +in[(i+2)*n+(j+-5)] * -0.000925925925926
                      +in[(i+2)*n+(j+-4)] * -0.0014880952381
                      +in[(i+2)*n+(j+-3)] * -0.00277777777778
                      +in[(i+2)*n+(j+-1)] * 0.00694444444444
                      +in[(i+2)*n+(j+0)] * 0.00694444444444
                      +in[(i+2)*n+(j+1)] * 0.00694444444444
                      +in[(i+2)*n+(j+2)] * 0.0208333333333
                      +in[(i+2)*n+(j+3)] * 0.00277777777778
                      +in[(i+2)*n+(j+4)] * 0.0014880952381
                      +in[(i+2)*n+(j+5)] * 0.000925925925926
                      +in[(i+2)*n+(j+6)] * 0.000631313131313
                      +in[(i+3)*n+(j+-6)] * -0.000631313131313
                      +in[(i+3)*n+(j+-5)] * -0.000925925925926
                      +in[(i+3)*n+(j+-4)] * -0.0014880952381
                      +in[(i+3)*n+(j+-2)] * 0.00277777777778
                      +in[(i+3)*n+(j+-1)] * 0.00277777777778
                      +in[(i+3)*n+(j+0)] * 0.00277777777778
                      +in[(i+3)*n+(j+1)] * 0.00277777777778
                      +in[(i+3)*n+(j+2)] * 0.00277777777778
                      +in[(i+3)*n+(j+3)] * 0.0138888888889
                      +in[(i+3)*n+(j+4)] * 0.0014880952381
                      +in[(i+3)*n+(j+5)] * 0.000925925925926
                      +in[(i+3)*n+(j+6)] * 0.000631313131313
                      +in[(i+4)*n+(j+-6)] * -0.000631313131313
                      +in[(i+4)*n+(j+-5)] * -0.000925925925926
                      +in[(i+4)*n+(j+-3)] * 0.0014880952381
                      +in[(i+4)*n+(j+-2)] * 0.0014880952381
                      +in[(i+4)*n+(j+-1)] * 0.0014880952381
                      +in[(i+4)*n+(j+0)] * 0.0014880952381
                      +in[(i+4)*n+(j+1)] * 0.0014880952381
                      +in[(i+4)*n+(j+2)] * 0.0014880952381
                      +in[(i+4)*n+(j+3)] * 0.0014880952381
                      +in[(i+4)*n+(j+4)] * 0.0104166666667
                      +in[(i+4)*n+(j+5)] * 0.000925925925926
                      +in[(i+4)*n+(j+6)] * 0.000631313131313
                      +in[(i+5)*n+(j+-6)] * -0.000631313131313
                      +in[(i+5)*n+(j+-4)] * 0.000925925925926
                      +in[(i+5)*n+(j+-3)] * 0.000925925925926
                      +in[(i+5)*n+(j+-2)] * 0.000925925925926
                      +in[(i+5)*n+(j+-1)] * 0.000925925925926
                      +in[(i+5)*n+(j+0)] * 0.000925925925926
                      +in[(i+5)*n+(j+1)] * 0.000925925925926
                      +in[(i+5)*n+(j+2)] * 0.000925925925926
                      +in[(i+5)*n+(j+3)] * 0.000925925925926
                      +in[(i+5)*n+(j+4)] * 0.000925925925926
                      +in[(i+5)*n+(j+5)] * 0.00833333333333
                      +in[(i+5)*n+(j+6)] * 0.000631313131313
                      +in[(i+6)*n+(j+-5)] * 0.000631313131313
                      +in[(i+6)*n+(j+-4)] * 0.000631313131313
                      +in[(i+6)*n+(j+-3)] * 0.000631313131313
                      +in[(i+6)*n+(j+-2)] * 0.000631313131313
                      +in[(i+6)*n+(j+-1)] * 0.000631313131313
                      +in[(i+6)*n+(j+0)] * 0.000631313131313
                      +in[(i+6)*n+(j+1)] * 0.000631313131313
                      +in[(i+6)*n+(j+2)] * 0.000631313131313
                      +in[(i+6)*n+(j+3)] * 0.000631313131313
                      +in[(i+6)*n+(j+4)] * 0.000631313131313
                      +in[(i+6)*n+(j+5)] * 0.000631313131313
                      +in[(i+6)*n+(j+6)] * 0.00694444444444
                      ;
       }
     }
  }

    Grid(int n, std::vector<double> & in, std::vector<double> & out)
        : n(n), in(in), out(out) { }

    int n;
    std::vector<double> & in;
    std::vector<double> & out;
};

template <>
struct Grid<7> {
  void operator()( const tbb::blocked_range2d<int>& r ) const {
    for (tbb::blocked_range<int>::const_iterator i=r.rows().begin(); i!=r.rows().end(); ++i ) {
      for (tbb::blocked_range<int>::const_iterator j=r.cols().begin(); j!=r.cols().end(); ++j ) {
        out[i*n+j] += +in[(i+-7)*n+(j+-7)] * -0.00510204081633
                      +in[(i+-7)*n+(j+-6)] * -0.000392464678179
                      +in[(i+-7)*n+(j+-5)] * -0.000392464678179
                      +in[(i+-7)*n+(j+-4)] * -0.000392464678179
                      +in[(i+-7)*n+(j+-3)] * -0.000392464678179
                      +in[(i+-7)*n+(j+-2)] * -0.000392464678179
                      +in[(i+-7)*n+(j+-1)] * -0.000392464678179
                      +in[(i+-7)*n+(j+0)] * -0.000392464678179
                      +in[(i+-7)*n+(j+1)] * -0.000392464678179
                      +in[(i+-7)*n+(j+2)] * -0.000392464678179
                      +in[(i+-7)*n+(j+3)] * -0.000392464678179
                      +in[(i+-7)*n+(j+4)] * -0.000392464678179
                      +in[(i+-7)*n+(j+5)] * -0.000392464678179
                      +in[(i+-7)*n+(j+6)] * -0.000392464678179
                      +in[(i+-6)*n+(j+-7)] * -0.000392464678179
                      +in[(i+-6)*n+(j+-6)] * -0.00595238095238
                      +in[(i+-6)*n+(j+-5)] * -0.000541125541126
                      +in[(i+-6)*n+(j+-4)] * -0.000541125541126
                      +in[(i+-6)*n+(j+-3)] * -0.000541125541126
                      +in[(i+-6)*n+(j+-2)] * -0.000541125541126
                      +in[(i+-6)*n+(j+-1)] * -0.000541125541126
                      +in[(i+-6)*n+(j+0)] * -0.000541125541126
                      +in[(i+-6)*n+(j+1)] * -0.000541125541126
                      +in[(i+-6)*n+(j+2)] * -0.000541125541126
                      +in[(i+-6)*n+(j+3)] * -0.000541125541126
                      +in[(i+-6)*n+(j+4)] * -0.000541125541126
                      +in[(i+-6)*n+(j+5)] * -0.000541125541126
                      +in[(i+-6)*n+(j+7)] * 0.000392464678179
                      +in[(i+-5)*n+(j+-7)] * -0.000392464678179
                      +in[(i+-5)*n+(j+-6)] * -0.000541125541126
                      +in[(i+-5)*n+(j+-5)] * -0.00714285714286
                      +in[(i+-5)*n+(j+-4)] * -0.000793650793651
                      +in[(i+-5)*n+(j+-3)] * -0.000793650793651
                      +in[(i+-5)*n+(j+-2)] * -0.000793650793651
                      +in[(i+-5)*n+(j+-1)] * -0.000793650793651
                      +in[(i+-5)*n+(j+0)] * -0.000793650793651
                      +in[(i+-5)*n+(j+1)] * -0.000793650793651
                      +in[(i+-5)*n+(j+2)] * -0.000793650793651
                      +in[(i+-5)*n+(j+3)] * -0.000793650793651
                      +in[(i+-5)*n+(j+4)] * -0.000793650793651
                      +in[(i+-5)*n+(j+6)] * 0.000541125541126
                      +in[(i+-5)*n+(j+7)] * 0.000392464678179
                      +in[(i+-4)*n+(j+-7)] * -0.000392464678179
                      +in[(i+-4)*n+(j+-6)] * -0.000541125541126
                      +in[(i+-4)*n+(j+-5)] * -0.000793650793651
                      +in[(i+-4)*n+(j+-4)] * -0.00892857142857
                      +in[(i+-4)*n+(j+-3)] * -0.00127551020408
                      +in[(i+-4)*n+(j+-2)] * -0.00127551020408
                      +in[(i+-4)*n+(j+-1)] * -0.00127551020408
                      +in[(i+-4)*n+(j+0)] * -0.00127551020408
                      +in[(i+-4)*n+(j+1)] * -0.00127551020408
                      +in[(i+-4)*n+(j+2)] * -0.00127551020408
                      +in[(i+-4)*n+(j+3)] * -0.00127551020408
                      +in[(i+-4)*n+(j+5)] * 0.000793650793651
                      +in[(i+-4)*n+(j+6)] * 0.000541125541126
                      +in[(i+-4)*n+(j+7)] * 0.000392464678179
                      +in[(i+-3)*n+(j+-7)] * -0.000392464678179
                      +in[(i+-3)*n+(j+-6)] * -0.000541125541126
                      +in[(i+-3)*n+(j+-5)] * -0.000793650793651
                      +in[(i+-3)*n+(j+-4)] * -0.00127551020408
                      +in[(i+-3)*n+(j+-3)] * -0.0119047619048
                      +in[(i+-3)*n+(j+-2)] * -0.00238095238095
                      +in[(i+-3)*n+(j+-1)] * -0.00238095238095
                      +in[(i+-3)*n+(j+0)] * -0.00238095238095
                      +in[(i+-3)*n+(j+1)] * -0.00238095238095
                      +in[(i+-3)*n+(j+2)] * -0.00238095238095
                      +in[(i+-3)*n+(j+4)] * 0.00127551020408
                      +in[(i+-3)*n+(j+5)] * 0.000793650793651
                      +in[(i+-3)*n+(j+6)] * 0.000541125541126
                      +in[(i+-3)*n+(j+7)] * 0.000392464678179
                      +in[(i+-2)*n+(j+-7)] * -0.000392464678179
                      +in[(i+-2)*n+(j+-6)] * -0.000541125541126
                      +in[(i+-2)*n+(j+-5)] * -0.000793650793651
                      +in[(i+-2)*n+(j+-4)] * -0.00127551020408
                      +in[(i+-2)*n+(j+-3)] * -0.00238095238095
                      +in[(i+-2)*n+(j+-2)] * -0.0178571428571
                      +in[(i+-2)*n+(j+-1)] * -0.00595238095238
                      +in[(i+-2)*n+(j+0)] * -0.00595238095238
                      +in[(i+-2)*n+(j+1)] * -0.00595238095238
                      +in[(i+-2)*n+(j+3)] * 0.00238095238095
                      +in[(i+-2)*n+(j+4)] * 0.00127551020408
                      +in[(i+-2)*n+(j+5)] * 0.000793650793651
                      +in[(i+-2)*n+(j+6)] * 0.000541125541126
                      +in[(i+-2)*n+(j+7)] * 0.000392464678179
                      +in[(i+-1)*n+(j+-7)] * -0.000392464678179
                      +in[(i+-1)*n+(j+-6)] * -0.000541125541126
                      +in[(i+-1)*n+(j+-5)] * -0.000793650793651
                      +in[(i+-1)*n+(j+-4)] * -0.00127551020408
                      +in[(i+-1)*n+(j+-3)] * -0.00238095238095
                      +in[(i+-1)*n+(j+-2)] * -0.00595238095238
                      +in[(i+-1)*n+(j+-1)] * -0.0357142857143
                      +in[(i+-1)*n+(j+0)] * -0.0357142857143
                      +in[(i+-1)*n+(j+2)] * 0.00595238095238
                      +in[(i+-1)*n+(j+3)] * 0.00238095238095
                      +in[(i+-1)*n+(j+4)] * 0.00127551020408
                      +in[(i+-1)*n+(j+5)] * 0.000793650793651
                      +in[(i+-1)*n+(j+6)] * 0.000541125541126
                      +in[(i+-1)*n+(j+7)] * 0.000392464678179
                      +in[(i+0)*n+(j+-7)] * -0.000392464678179
                      +in[(i+0)*n+(j+-6)] * -0.000541125541126
                      +in[(i+0)*n+(j+-5)] * -0.000793650793651
                      +in[(i+0)*n+(j+-4)] * -0.00127551020408
                      +in[(i+0)*n+(j+-3)] * -0.00238095238095
                      +in[(i+0)*n+(j+-2)] * -0.00595238095238
                      +in[(i+0)*n+(j+-1)] * -0.0357142857143
                      +in[(i+0)*n+(j+1)] * 0.0357142857143
                      +in[(i+0)*n+(j+2)] * 0.00595238095238
                      +in[(i+0)*n+(j+3)] * 0.00238095238095
                      +in[(i+0)*n+(j+4)] * 0.00127551020408
                      +in[(i+0)*n+(j+5)] * 0.000793650793651
                      +in[(i+0)*n+(j+6)] * 0.000541125541126
                      +in[(i+0)*n+(j+7)] * 0.000392464678179
                      +in[(i+1)*n+(j+-7)] * -0.000392464678179
                      +in[(i+1)*n+(j+-6)] * -0.000541125541126
                      +in[(i+1)*n+(j+-5)] * -0.000793650793651
                      +in[(i+1)*n+(j+-4)] * -0.00127551020408
                      +in[(i+1)*n+(j+-3)] * -0.00238095238095
                      +in[(i+1)*n+(j+-2)] * -0.00595238095238
                      +in[(i+1)*n+(j+0)] * 0.0357142857143
                      +in[(i+1)*n+(j+1)] * 0.0357142857143
                      +in[(i+1)*n+(j+2)] * 0.00595238095238
                      +in[(i+1)*n+(j+3)] * 0.00238095238095
                      +in[(i+1)*n+(j+4)] * 0.00127551020408
                      +in[(i+1)*n+(j+5)] * 0.000793650793651
                      +in[(i+1)*n+(j+6)] * 0.000541125541126
                      +in[(i+1)*n+(j+7)] * 0.000392464678179
                      +in[(i+2)*n+(j+-7)] * -0.000392464678179
                      +in[(i+2)*n+(j+-6)] * -0.000541125541126
                      +in[(i+2)*n+(j+-5)] * -0.000793650793651
                      +in[(i+2)*n+(j+-4)] * -0.00127551020408
                      +in[(i+2)*n+(j+-3)] * -0.00238095238095
                      +in[(i+2)*n+(j+-1)] * 0.00595238095238
                      +in[(i+2)*n+(j+0)] * 0.00595238095238
                      +in[(i+2)*n+(j+1)] * 0.00595238095238
                      +in[(i+2)*n+(j+2)] * 0.0178571428571
                      +in[(i+2)*n+(j+3)] * 0.00238095238095
                      +in[(i+2)*n+(j+4)] * 0.00127551020408
                      +in[(i+2)*n+(j+5)] * 0.000793650793651
                      +in[(i+2)*n+(j+6)] * 0.000541125541126
                      +in[(i+2)*n+(j+7)] * 0.000392464678179
                      +in[(i+3)*n+(j+-7)] * -0.000392464678179
                      +in[(i+3)*n+(j+-6)] * -0.000541125541126
                      +in[(i+3)*n+(j+-5)] * -0.000793650793651
                      +in[(i+3)*n+(j+-4)] * -0.00127551020408
                      +in[(i+3)*n+(j+-2)] * 0.00238095238095
                      +in[(i+3)*n+(j+-1)] * 0.00238095238095
                      +in[(i+3)*n+(j+0)] * 0.00238095238095
                      +in[(i+3)*n+(j+1)] * 0.00238095238095
                      +in[(i+3)*n+(j+2)] * 0.00238095238095
                      +in[(i+3)*n+(j+3)] * 0.0119047619048
                      +in[(i+3)*n+(j+4)] * 0.00127551020408
                      +in[(i+3)*n+(j+5)] * 0.000793650793651
                      +in[(i+3)*n+(j+6)] * 0.000541125541126
                      +in[(i+3)*n+(j+7)] * 0.000392464678179
                      +in[(i+4)*n+(j+-7)] * -0.000392464678179
                      +in[(i+4)*n+(j+-6)] * -0.000541125541126
                      +in[(i+4)*n+(j+-5)] * -0.000793650793651
                      +in[(i+4)*n+(j+-3)] * 0.00127551020408
                      +in[(i+4)*n+(j+-2)] * 0.00127551020408
                      +in[(i+4)*n+(j+-1)] * 0.00127551020408
                      +in[(i+4)*n+(j+0)] * 0.00127551020408
                      +in[(i+4)*n+(j+1)] * 0.00127551020408
                      +in[(i+4)*n+(j+2)] * 0.00127551020408
                      +in[(i+4)*n+(j+3)] * 0.00127551020408
                      +in[(i+4)*n+(j+4)] * 0.00892857142857
                      +in[(i+4)*n+(j+5)] * 0.000793650793651
                      +in[(i+4)*n+(j+6)] * 0.000541125541126
                      +in[(i+4)*n+(j+7)] * 0.000392464678179
                      +in[(i+5)*n+(j+-7)] * -0.000392464678179
                      +in[(i+5)*n+(j+-6)] * -0.000541125541126
                      +in[(i+5)*n+(j+-4)] * 0.000793650793651
                      +in[(i+5)*n+(j+-3)] * 0.000793650793651
                      +in[(i+5)*n+(j+-2)] * 0.000793650793651
                      +in[(i+5)*n+(j+-1)] * 0.000793650793651
                      +in[(i+5)*n+(j+0)] * 0.000793650793651
                      +in[(i+5)*n+(j+1)] * 0.000793650793651
                      +in[(i+5)*n+(j+2)] * 0.000793650793651
                      +in[(i+5)*n+(j+3)] * 0.000793650793651
                      +in[(i+5)*n+(j+4)] * 0.000793650793651
                      +in[(i+5)*n+(j+5)] * 0.00714285714286
                      +in[(i+5)*n+(j+6)] * 0.000541125541126
                      +in[(i+5)*n+(j+7)] * 0.000392464678179
                      +in[(i+6)*n+(j+-7)] * -0.000392464678179
                      +in[(i+6)*n+(j+-5)] * 0.000541125541126
                      +in[(i+6)*n+(j+-4)] * 0.000541125541126
                      +in[(i+6)*n+(j+-3)] * 0.000541125541126
                      +in[(i+6)*n+(j+-2)] * 0.000541125541126
                      +in[(i+6)*n+(j+-1)] * 0.000541125541126
                      +in[(i+6)*n+(j+0)] * 0.000541125541126
                      +in[(i+6)*n+(j+1)] * 0.000541125541126
                      +in[(i+6)*n+(j+2)] * 0.000541125541126
                      +in[(i+6)*n+(j+3)] * 0.000541125541126
                      +in[(i+6)*n+(j+4)] * 0.000541125541126
                      +in[(i+6)*n+(j+5)] * 0.000541125541126
                      +in[(i+6)*n+(j+6)] * 0.00595238095238
                      +in[(i+6)*n+(j+7)] * 0.000392464678179
                      +in[(i+7)*n+(j+-6)] * 0.000392464678179
                      +in[(i+7)*n+(j+-5)] * 0.000392464678179
                      +in[(i+7)*n+(j+-4)] * 0.000392464678179
                      +in[(i+7)*n+(j+-3)] * 0.000392464678179
                      +in[(i+7)*n+(j+-2)] * 0.000392464678179
                      +in[(i+7)*n+(j+-1)] * 0.000392464678179
                      +in[(i+7)*n+(j+0)] * 0.000392464678179
                      +in[(i+7)*n+(j+1)] * 0.000392464678179
                      +in[(i+7)*n+(j+2)] * 0.000392464678179
                      +in[(i+7)*n+(j+3)] * 0.000392464678179
                      +in[(i+7)*n+(j+4)] * 0.000392464678179
                      +in[(i+7)*n+(j+5)] * 0.000392464678179
                      +in[(i+7)*n+(j+6)] * 0.000392464678179
                      +in[(i+7)*n+(j+7)] * 0.00510204081633
                      ;
       }
     }
  }

    Grid(int n, std::vector<double> & in, std::vector<double> & out)
        : n(n), in(in), out(out) { }

    int n;
    std::vector<double> & in;
    std::vector<double> & out;
};

template <>
struct Grid<8> {
  void operator()( const tbb::blocked_range2d<int>& r ) const {
    for (tbb::blocked_range<int>::const_iterator i=r.rows().begin(); i!=r.rows().end(); ++i ) {
      for (tbb::blocked_range<int>::const_iterator j=r.cols().begin(); j!=r.cols().end(); ++j ) {
        out[i*n+j] += +in[(i+-8)*n+(j+-8)] * -0.00390625
                      +in[(i+-8)*n+(j+-7)] * -0.000260416666667
                      +in[(i+-8)*n+(j+-6)] * -0.000260416666667
                      +in[(i+-8)*n+(j+-5)] * -0.000260416666667
                      +in[(i+-8)*n+(j+-4)] * -0.000260416666667
                      +in[(i+-8)*n+(j+-3)] * -0.000260416666667
                      +in[(i+-8)*n+(j+-2)] * -0.000260416666667
                      +in[(i+-8)*n+(j+-1)] * -0.000260416666667
                      +in[(i+-8)*n+(j+0)] * -0.000260416666667
                      +in[(i+-8)*n+(j+1)] * -0.000260416666667
                      +in[(i+-8)*n+(j+2)] * -0.000260416666667
                      +in[(i+-8)*n+(j+3)] * -0.000260416666667
                      +in[(i+-8)*n+(j+4)] * -0.000260416666667
                      +in[(i+-8)*n+(j+5)] * -0.000260416666667
                      +in[(i+-8)*n+(j+6)] * -0.000260416666667
                      +in[(i+-8)*n+(j+7)] * -0.000260416666667
                      +in[(i+-7)*n+(j+-8)] * -0.000260416666667
                      +in[(i+-7)*n+(j+-7)] * -0.00446428571429
                      +in[(i+-7)*n+(j+-6)] * -0.000343406593407
                      +in[(i+-7)*n+(j+-5)] * -0.000343406593407
                      +in[(i+-7)*n+(j+-4)] * -0.000343406593407
                      +in[(i+-7)*n+(j+-3)] * -0.000343406593407
                      +in[(i+-7)*n+(j+-2)] * -0.000343406593407
                      +in[(i+-7)*n+(j+-1)] * -0.000343406593407
                      +in[(i+-7)*n+(j+0)] * -0.000343406593407
                      +in[(i+-7)*n+(j+1)] * -0.000343406593407
                      +in[(i+-7)*n+(j+2)] * -0.000343406593407
                      +in[(i+-7)*n+(j+3)] * -0.000343406593407
                      +in[(i+-7)*n+(j+4)] * -0.000343406593407
                      +in[(i+-7)*n+(j+5)] * -0.000343406593407
                      +in[(i+-7)*n+(j+6)] * -0.000343406593407
                      +in[(i+-7)*n+(j+8)] * 0.000260416666667
                      +in[(i+-6)*n+(j+-8)] * -0.000260416666667
                      +in[(i+-6)*n+(j+-7)] * -0.000343406593407
                      +in[(i+-6)*n+(j+-6)] * -0.00520833333333
                      +in[(i+-6)*n+(j+-5)] * -0.000473484848485
                      +in[(i+-6)*n+(j+-4)] * -0.000473484848485
                      +in[(i+-6)*n+(j+-3)] * -0.000473484848485
                      +in[(i+-6)*n+(j+-2)] * -0.000473484848485
                      +in[(i+-6)*n+(j+-1)] * -0.000473484848485
                      +in[(i+-6)*n+(j+0)] * -0.000473484848485
                      +in[(i+-6)*n+(j+1)] * -0.000473484848485
                      +in[(i+-6)*n+(j+2)] * -0.000473484848485
                      +in[(i+-6)*n+(j+3)] * -0.000473484848485
                      +in[(i+-6)*n+(j+4)] * -0.000473484848485
                      +in[(i+-6)*n+(j+5)] * -0.000473484848485
                      +in[(i+-6)*n+(j+7)] * 0.000343406593407
                      +in[(i+-6)*n+(j+8)] * 0.000260416666667
                      +in[(i+-5)*n+(j+-8)] * -0.000260416666667
                      +in[(i+-5)*n+(j+-7)] * -0.000343406593407
                      +in[(i+-5)*n+(j+-6)] * -0.000473484848485
                      +in[(i+-5)*n+(j+-5)] * -0.00625
                      +in[(i+-5)*n+(j+-4)] * -0.000694444444444
                      +in[(i+-5)*n+(j+-3)] * -0.000694444444444
                      +in[(i+-5)*n+(j+-2)] * -0.000694444444444
                      +in[(i+-5)*n+(j+-1)] * -0.000694444444444
                      +in[(i+-5)*n+(j+0)] * -0.000694444444444
                      +in[(i+-5)*n+(j+1)] * -0.000694444444444
                      +in[(i+-5)*n+(j+2)] * -0.000694444444444
                      +in[(i+-5)*n+(j+3)] * -0.000694444444444
                      +in[(i+-5)*n+(j+4)] * -0.000694444444444
                      +in[(i+-5)*n+(j+6)] * 0.000473484848485
                      +in[(i+-5)*n+(j+7)] * 0.000343406593407
                      +in[(i+-5)*n+(j+8)] * 0.000260416666667
                      +in[(i+-4)*n+(j+-8)] * -0.000260416666667
                      +in[(i+-4)*n+(j+-7)] * -0.000343406593407
                      +in[(i+-4)*n+(j+-6)] * -0.000473484848485
                      +in[(i+-4)*n+(j+-5)] * -0.000694444444444
                      +in[(i+-4)*n+(j+-4)] * -0.0078125
                      +in[(i+-4)*n+(j+-3)] * -0.00111607142857
                      +in[(i+-4)*n+(j+-2)] * -0.00111607142857
                      +in[(i+-4)*n+(j+-1)] * -0.00111607142857
                      +in[(i+-4)*n+(j+0)] * -0.00111607142857
                      +in[(i+-4)*n+(j+1)] * -0.00111607142857
                      +in[(i+-4)*n+(j+2)] * -0.00111607142857
                      +in[(i+-4)*n+(j+3)] * -0.00111607142857
                      +in[(i+-4)*n+(j+5)] * 0.000694444444444
                      +in[(i+-4)*n+(j+6)] * 0.000473484848485
                      +in[(i+-4)*n+(j+7)] * 0.000343406593407
                      +in[(i+-4)*n+(j+8)] * 0.000260416666667
                      +in[(i+-3)*n+(j+-8)] * -0.000260416666667
                      +in[(i+-3)*n+(j+-7)] * -0.000343406593407
                      +in[(i+-3)*n+(j+-6)] * -0.000473484848485
                      +in[(i+-3)*n+(j+-5)] * -0.000694444444444
                      +in[(i+-3)*n+(j+-4)] * -0.00111607142857
                      +in[(i+-3)*n+(j+-3)] * -0.0104166666667
                      +in[(i+-3)*n+(j+-2)] * -0.00208333333333
                      +in[(i+-3)*n+(j+-1)] * -0.00208333333333
                      +in[(i+-3)*n+(j+0)] * -0.00208333333333
                      +in[(i+-3)*n+(j+1)] * -0.00208333333333
                      +in[(i+-3)*n+(j+2)] * -0.00208333333333
                      +in[(i+-3)*n+(j+4)] * 0.00111607142857
                      +in[(i+-3)*n+(j+5)] * 0.000694444444444
                      +in[(i+-3)*n+(j+6)] * 0.000473484848485
                      +in[(i+-3)*n+(j+7)] * 0.000343406593407
                      +in[(i+-3)*n+(j+8)] * 0.000260416666667
                      +in[(i+-2)*n+(j+-8)] * -0.000260416666667
                      +in[(i+-2)*n+(j+-7)] * -0.000343406593407
                      +in[(i+-2)*n+(j+-6)] * -0.000473484848485
                      +in[(i+-2)*n+(j+-5)] * -0.000694444444444
                      +in[(i+-2)*n+(j+-4)] * -0.00111607142857
                      +in[(i+-2)*n+(j+-3)] * -0.00208333333333
                      +in[(i+-2)*n+(j+-2)] * -0.015625
                      +in[(i+-2)*n+(j+-1)] * -0.00520833333333
                      +in[(i+-2)*n+(j+0)] * -0.00520833333333
                      +in[(i+-2)*n+(j+1)] * -0.00520833333333
                      +in[(i+-2)*n+(j+3)] * 0.00208333333333
                      +in[(i+-2)*n+(j+4)] * 0.00111607142857
                      +in[(i+-2)*n+(j+5)] * 0.000694444444444
                      +in[(i+-2)*n+(j+6)] * 0.000473484848485
                      +in[(i+-2)*n+(j+7)] * 0.000343406593407
                      +in[(i+-2)*n+(j+8)] * 0.000260416666667
                      +in[(i+-1)*n+(j+-8)] * -0.000260416666667
                      +in[(i+-1)*n+(j+-7)] * -0.000343406593407
                      +in[(i+-1)*n+(j+-6)] * -0.000473484848485
                      +in[(i+-1)*n+(j+-5)] * -0.000694444444444
                      +in[(i+-1)*n+(j+-4)] * -0.00111607142857
                      +in[(i+-1)*n+(j+-3)] * -0.00208333333333
                      +in[(i+-1)*n+(j+-2)] * -0.00520833333333
                      +in[(i+-1)*n+(j+-1)] * -0.03125
                      +in[(i+-1)*n+(j+0)] * -0.03125
                      +in[(i+-1)*n+(j+2)] * 0.00520833333333
                      +in[(i+-1)*n+(j+3)] * 0.00208333333333
                      +in[(i+-1)*n+(j+4)] * 0.00111607142857
                      +in[(i+-1)*n+(j+5)] * 0.000694444444444
                      +in[(i+-1)*n+(j+6)] * 0.000473484848485
                      +in[(i+-1)*n+(j+7)] * 0.000343406593407
                      +in[(i+-1)*n+(j+8)] * 0.000260416666667
                      +in[(i+0)*n+(j+-8)] * -0.000260416666667
                      +in[(i+0)*n+(j+-7)] * -0.000343406593407
                      +in[(i+0)*n+(j+-6)] * -0.000473484848485
                      +in[(i+0)*n+(j+-5)] * -0.000694444444444
                      +in[(i+0)*n+(j+-4)] * -0.00111607142857
                      +in[(i+0)*n+(j+-3)] * -0.00208333333333
                      +in[(i+0)*n+(j+-2)] * -0.00520833333333
                      +in[(i+0)*n+(j+-1)] * -0.03125
                      +in[(i+0)*n+(j+1)] * 0.03125
                      +in[(i+0)*n+(j+2)] * 0.00520833333333
                      +in[(i+0)*n+(j+3)] * 0.00208333333333
                      +in[(i+0)*n+(j+4)] * 0.00111607142857
                      +in[(i+0)*n+(j+5)] * 0.000694444444444
                      +in[(i+0)*n+(j+6)] * 0.000473484848485
                      +in[(i+0)*n+(j+7)] * 0.000343406593407
                      +in[(i+0)*n+(j+8)] * 0.000260416666667
                      +in[(i+1)*n+(j+-8)] * -0.000260416666667
                      +in[(i+1)*n+(j+-7)] * -0.000343406593407
                      +in[(i+1)*n+(j+-6)] * -0.000473484848485
                      +in[(i+1)*n+(j+-5)] * -0.000694444444444
                      +in[(i+1)*n+(j+-4)] * -0.00111607142857
                      +in[(i+1)*n+(j+-3)] * -0.00208333333333
                      +in[(i+1)*n+(j+-2)] * -0.00520833333333
                      +in[(i+1)*n+(j+0)] * 0.03125
                      +in[(i+1)*n+(j+1)] * 0.03125
                      +in[(i+1)*n+(j+2)] * 0.00520833333333
                      +in[(i+1)*n+(j+3)] * 0.00208333333333
                      +in[(i+1)*n+(j+4)] * 0.00111607142857
                      +in[(i+1)*n+(j+5)] * 0.000694444444444
                      +in[(i+1)*n+(j+6)] * 0.000473484848485
                      +in[(i+1)*n+(j+7)] * 0.000343406593407
                      +in[(i+1)*n+(j+8)] * 0.000260416666667
                      +in[(i+2)*n+(j+-8)] * -0.000260416666667
                      +in[(i+2)*n+(j+-7)] * -0.000343406593407
                      +in[(i+2)*n+(j+-6)] * -0.000473484848485
                      +in[(i+2)*n+(j+-5)] * -0.000694444444444
                      +in[(i+2)*n+(j+-4)] * -0.00111607142857
                      +in[(i+2)*n+(j+-3)] * -0.00208333333333
                      +in[(i+2)*n+(j+-1)] * 0.00520833333333
                      +in[(i+2)*n+(j+0)] * 0.00520833333333
                      +in[(i+2)*n+(j+1)] * 0.00520833333333
                      +in[(i+2)*n+(j+2)] * 0.015625
                      +in[(i+2)*n+(j+3)] * 0.00208333333333
                      +in[(i+2)*n+(j+4)] * 0.00111607142857
                      +in[(i+2)*n+(j+5)] * 0.000694444444444
                      +in[(i+2)*n+(j+6)] * 0.000473484848485
                      +in[(i+2)*n+(j+7)] * 0.000343406593407
                      +in[(i+2)*n+(j+8)] * 0.000260416666667
                      +in[(i+3)*n+(j+-8)] * -0.000260416666667
                      +in[(i+3)*n+(j+-7)] * -0.000343406593407
                      +in[(i+3)*n+(j+-6)] * -0.000473484848485
                      +in[(i+3)*n+(j+-5)] * -0.000694444444444
                      +in[(i+3)*n+(j+-4)] * -0.00111607142857
                      +in[(i+3)*n+(j+-2)] * 0.00208333333333
                      +in[(i+3)*n+(j+-1)] * 0.00208333333333
                      +in[(i+3)*n+(j+0)] * 0.00208333333333
                      +in[(i+3)*n+(j+1)] * 0.00208333333333
                      +in[(i+3)*n+(j+2)] * 0.00208333333333
                      +in[(i+3)*n+(j+3)] * 0.0104166666667
                      +in[(i+3)*n+(j+4)] * 0.00111607142857
                      +in[(i+3)*n+(j+5)] * 0.000694444444444
                      +in[(i+3)*n+(j+6)] * 0.000473484848485
                      +in[(i+3)*n+(j+7)] * 0.000343406593407
                      +in[(i+3)*n+(j+8)] * 0.000260416666667
                      +in[(i+4)*n+(j+-8)] * -0.000260416666667
                      +in[(i+4)*n+(j+-7)] * -0.000343406593407
                      +in[(i+4)*n+(j+-6)] * -0.000473484848485
                      +in[(i+4)*n+(j+-5)] * -0.000694444444444
                      +in[(i+4)*n+(j+-3)] * 0.00111607142857
                      +in[(i+4)*n+(j+-2)] * 0.00111607142857
                      +in[(i+4)*n+(j+-1)] * 0.00111607142857
                      +in[(i+4)*n+(j+0)] * 0.00111607142857
                      +in[(i+4)*n+(j+1)] * 0.00111607142857
                      +in[(i+4)*n+(j+2)] * 0.00111607142857
                      +in[(i+4)*n+(j+3)] * 0.00111607142857
                      +in[(i+4)*n+(j+4)] * 0.0078125
                      +in[(i+4)*n+(j+5)] * 0.000694444444444
                      +in[(i+4)*n+(j+6)] * 0.000473484848485
                      +in[(i+4)*n+(j+7)] * 0.000343406593407
                      +in[(i+4)*n+(j+8)] * 0.000260416666667
                      +in[(i+5)*n+(j+-8)] * -0.000260416666667
                      +in[(i+5)*n+(j+-7)] * -0.000343406593407
                      +in[(i+5)*n+(j+-6)] * -0.000473484848485
                      +in[(i+5)*n+(j+-4)] * 0.000694444444444
                      +in[(i+5)*n+(j+-3)] * 0.000694444444444
                      +in[(i+5)*n+(j+-2)] * 0.000694444444444
                      +in[(i+5)*n+(j+-1)] * 0.000694444444444
                      +in[(i+5)*n+(j+0)] * 0.000694444444444
                      +in[(i+5)*n+(j+1)] * 0.000694444444444
                      +in[(i+5)*n+(j+2)] * 0.000694444444444
                      +in[(i+5)*n+(j+3)] * 0.000694444444444
                      +in[(i+5)*n+(j+4)] * 0.000694444444444
                      +in[(i+5)*n+(j+5)] * 0.00625
                      +in[(i+5)*n+(j+6)] * 0.000473484848485
                      +in[(i+5)*n+(j+7)] * 0.000343406593407
                      +in[(i+5)*n+(j+8)] * 0.000260416666667
                      +in[(i+6)*n+(j+-8)] * -0.000260416666667
                      +in[(i+6)*n+(j+-7)] * -0.000343406593407
                      +in[(i+6)*n+(j+-5)] * 0.000473484848485
                      +in[(i+6)*n+(j+-4)] * 0.000473484848485
                      +in[(i+6)*n+(j+-3)] * 0.000473484848485
                      +in[(i+6)*n+(j+-2)] * 0.000473484848485
                      +in[(i+6)*n+(j+-1)] * 0.000473484848485
                      +in[(i+6)*n+(j+0)] * 0.000473484848485
                      +in[(i+6)*n+(j+1)] * 0.000473484848485
                      +in[(i+6)*n+(j+2)] * 0.000473484848485
                      +in[(i+6)*n+(j+3)] * 0.000473484848485
                      +in[(i+6)*n+(j+4)] * 0.000473484848485
                      +in[(i+6)*n+(j+5)] * 0.000473484848485
                      +in[(i+6)*n+(j+6)] * 0.00520833333333
                      +in[(i+6)*n+(j+7)] * 0.000343406593407
                      +in[(i+6)*n+(j+8)] * 0.000260416666667
                      +in[(i+7)*n+(j+-8)] * -0.000260416666667
                      +in[(i+7)*n+(j+-6)] * 0.000343406593407
                      +in[(i+7)*n+(j+-5)] * 0.000343406593407
                      +in[(i+7)*n+(j+-4)] * 0.000343406593407
                      +in[(i+7)*n+(j+-3)] * 0.000343406593407
                      +in[(i+7)*n+(j+-2)] * 0.000343406593407
                      +in[(i+7)*n+(j+-1)] * 0.000343406593407
                      +in[(i+7)*n+(j+0)] * 0.000343406593407
                      +in[(i+7)*n+(j+1)] * 0.000343406593407
                      +in[(i+7)*n+(j+2)] * 0.000343406593407
                      +in[(i+7)*n+(j+3)] * 0.000343406593407
                      +in[(i+7)*n+(j+4)] * 0.000343406593407
                      +in[(i+7)*n+(j+5)] * 0.000343406593407
                      +in[(i+7)*n+(j+6)] * 0.000343406593407
                      +in[(i+7)*n+(j+7)] * 0.00446428571429
                      +in[(i+7)*n+(j+8)] * 0.000260416666667
                      +in[(i+8)*n+(j+-7)] * 0.000260416666667
                      +in[(i+8)*n+(j+-6)] * 0.000260416666667
                      +in[(i+8)*n+(j+-5)] * 0.000260416666667
                      +in[(i+8)*n+(j+-4)] * 0.000260416666667
                      +in[(i+8)*n+(j+-3)] * 0.000260416666667
                      +in[(i+8)*n+(j+-2)] * 0.000260416666667
                      +in[(i+8)*n+(j+-1)] * 0.000260416666667
                      +in[(i+8)*n+(j+0)] * 0.000260416666667
                      +in[(i+8)*n+(j+1)] * 0.000260416666667
                      +in[(i+8)*n+(j+2)] * 0.000260416666667
                      +in[(i+8)*n+(j+3)] * 0.000260416666667
                      +in[(i+8)*n+(j+4)] * 0.000260416666667
                      +in[(i+8)*n+(j+5)] * 0.000260416666667
                      +in[(i+8)*n+(j+6)] * 0.000260416666667
                      +in[(i+8)*n+(j+7)] * 0.000260416666667
                      +in[(i+8)*n+(j+8)] * 0.00390625
                      ;
       }
     }
  }

    Grid(int n, std::vector<double> & in, std::vector<double> & out)
        : n(n), in(in), out(out) { }

    int n;
    std::vector<double> & in;
    std::vector<double> & out;
};

template <>
struct Grid<9> {
  void operator()( const tbb::blocked_range2d<int>& r ) const {
    for (tbb::blocked_range<int>::const_iterator i=r.rows().begin(); i!=r.rows().end(); ++i ) {
      for (tbb::blocked_range<int>::const_iterator j=r.cols().begin(); j!=r.cols().end(); ++j ) {
        out[i*n+j] += +in[(i+-9)*n+(j+-9)] * -0.00308641975309
                      +in[(i+-9)*n+(j+-8)] * -0.000181554103123
                      +in[(i+-9)*n+(j+-7)] * -0.000181554103123
                      +in[(i+-9)*n+(j+-6)] * -0.000181554103123
                      +in[(i+-9)*n+(j+-5)] * -0.000181554103123
                      +in[(i+-9)*n+(j+-4)] * -0.000181554103123
                      +in[(i+-9)*n+(j+-3)] * -0.000181554103123
                      +in[(i+-9)*n+(j+-2)] * -0.000181554103123
                      +in[(i+-9)*n+(j+-1)] * -0.000181554103123
                      +in[(i+-9)*n+(j+0)] * -0.000181554103123
                      +in[(i+-9)*n+(j+1)] * -0.000181554103123
                      +in[(i+-9)*n+(j+2)] * -0.000181554103123
                      +in[(i+-9)*n+(j+3)] * -0.000181554103123
                      +in[(i+-9)*n+(j+4)] * -0.000181554103123
                      +in[(i+-9)*n+(j+5)] * -0.000181554103123
                      +in[(i+-9)*n+(j+6)] * -0.000181554103123
                      +in[(i+-9)*n+(j+7)] * -0.000181554103123
                      +in[(i+-9)*n+(j+8)] * -0.000181554103123
                      +in[(i+-8)*n+(j+-9)] * -0.000181554103123
                      +in[(i+-8)*n+(j+-8)] * -0.00347222222222
                      +in[(i+-8)*n+(j+-7)] * -0.000231481481481
                      +in[(i+-8)*n+(j+-6)] * -0.000231481481481
                      +in[(i+-8)*n+(j+-5)] * -0.000231481481481
                      +in[(i+-8)*n+(j+-4)] * -0.000231481481481
                      +in[(i+-8)*n+(j+-3)] * -0.000231481481481
                      +in[(i+-8)*n+(j+-2)] * -0.000231481481481
                      +in[(i+-8)*n+(j+-1)] * -0.000231481481481
                      +in[(i+-8)*n+(j+0)] * -0.000231481481481
                      +in[(i+-8)*n+(j+1)] * -0.000231481481481
                      +in[(i+-8)*n+(j+2)] * -0.000231481481481
                      +in[(i+-8)*n+(j+3)] * -0.000231481481481
                      +in[(i+-8)*n+(j+4)] * -0.000231481481481
                      +in[(i+-8)*n+(j+5)] * -0.000231481481481
                      +in[(i+-8)*n+(j+6)] * -0.000231481481481
                      +in[(i+-8)*n+(j+7)] * -0.000231481481481
                      +in[(i+-8)*n+(j+9)] * 0.000181554103123
                      +in[(i+-7)*n+(j+-9)] * -0.000181554103123
                      +in[(i+-7)*n+(j+-8)] * -0.000231481481481
                      +in[(i+-7)*n+(j+-7)] * -0.00396825396825
                      +in[(i+-7)*n+(j+-6)] * -0.00030525030525
                      +in[(i+-7)*n+(j+-5)] * -0.00030525030525
                      +in[(i+-7)*n+(j+-4)] * -0.00030525030525
                      +in[(i+-7)*n+(j+-3)] * -0.00030525030525
                      +in[(i+-7)*n+(j+-2)] * -0.00030525030525
                      +in[(i+-7)*n+(j+-1)] * -0.00030525030525
                      +in[(i+-7)*n+(j+0)] * -0.00030525030525
                      +in[(i+-7)*n+(j+1)] * -0.00030525030525
                      +in[(i+-7)*n+(j+2)] * -0.00030525030525
                      +in[(i+-7)*n+(j+3)] * -0.00030525030525
                      +in[(i+-7)*n+(j+4)] * -0.00030525030525
                      +in[(i+-7)*n+(j+5)] * -0.00030525030525
                      +in[(i+-7)*n+(j+6)] * -0.00030525030525
                      +in[(i+-7)*n+(j+8)] * 0.000231481481481
                      +in[(i+-7)*n+(j+9)] * 0.000181554103123
                      +in[(i+-6)*n+(j+-9)] * -0.000181554103123
                      +in[(i+-6)*n+(j+-8)] * -0.000231481481481
                      +in[(i+-6)*n+(j+-7)] * -0.00030525030525
                      +in[(i+-6)*n+(j+-6)] * -0.00462962962963
                      +in[(i+-6)*n+(j+-5)] * -0.000420875420875
                      +in[(i+-6)*n+(j+-4)] * -0.000420875420875
                      +in[(i+-6)*n+(j+-3)] * -0.000420875420875
                      +in[(i+-6)*n+(j+-2)] * -0.000420875420875
                      +in[(i+-6)*n+(j+-1)] * -0.000420875420875
                      +in[(i+-6)*n+(j+0)] * -0.000420875420875
                      +in[(i+-6)*n+(j+1)] * -0.000420875420875
                      +in[(i+-6)*n+(j+2)] * -0.000420875420875
                      +in[(i+-6)*n+(j+3)] * -0.000420875420875
                      +in[(i+-6)*n+(j+4)] * -0.000420875420875
                      +in[(i+-6)*n+(j+5)] * -0.000420875420875
                      +in[(i+-6)*n+(j+7)] * 0.00030525030525
                      +in[(i+-6)*n+(j+8)] * 0.000231481481481
                      +in[(i+-6)*n+(j+9)] * 0.000181554103123
                      +in[(i+-5)*n+(j+-9)] * -0.000181554103123
                      +in[(i+-5)*n+(j+-8)] * -0.000231481481481
                      +in[(i+-5)*n+(j+-7)] * -0.00030525030525
                      +in[(i+-5)*n+(j+-6)] * -0.000420875420875
                      +in[(i+-5)*n+(j+-5)] * -0.00555555555556
                      +in[(i+-5)*n+(j+-4)] * -0.000617283950617
                      +in[(i+-5)*n+(j+-3)] * -0.000617283950617
                      +in[(i+-5)*n+(j+-2)] * -0.000617283950617
                      +in[(i+-5)*n+(j+-1)] * -0.000617283950617
                      +in[(i+-5)*n+(j+0)] * -0.000617283950617
                      +in[(i+-5)*n+(j+1)] * -0.000617283950617
                      +in[(i+-5)*n+(j+2)] * -0.000617283950617
                      +in[(i+-5)*n+(j+3)] * -0.000617283950617
                      +in[(i+-5)*n+(j+4)] * -0.000617283950617
                      +in[(i+-5)*n+(j+6)] * 0.000420875420875
                      +in[(i+-5)*n+(j+7)] * 0.00030525030525
                      +in[(i+-5)*n+(j+8)] * 0.000231481481481
                      +in[(i+-5)*n+(j+9)] * 0.000181554103123
                      +in[(i+-4)*n+(j+-9)] * -0.000181554103123
                      +in[(i+-4)*n+(j+-8)] * -0.000231481481481
                      +in[(i+-4)*n+(j+-7)] * -0.00030525030525
                      +in[(i+-4)*n+(j+-6)] * -0.000420875420875
                      +in[(i+-4)*n+(j+-5)] * -0.000617283950617
                      +in[(i+-4)*n+(j+-4)] * -0.00694444444444
                      +in[(i+-4)*n+(j+-3)] * -0.000992063492063
                      +in[(i+-4)*n+(j+-2)] * -0.000992063492063
                      +in[(i+-4)*n+(j+-1)] * -0.000992063492063
                      +in[(i+-4)*n+(j+0)] * -0.000992063492063
                      +in[(i+-4)*n+(j+1)] * -0.000992063492063
                      +in[(i+-4)*n+(j+2)] * -0.000992063492063
                      +in[(i+-4)*n+(j+3)] * -0.000992063492063
                      +in[(i+-4)*n+(j+5)] * 0.000617283950617
                      +in[(i+-4)*n+(j+6)] * 0.000420875420875
                      +in[(i+-4)*n+(j+7)] * 0.00030525030525
                      +in[(i+-4)*n+(j+8)] * 0.000231481481481
                      +in[(i+-4)*n+(j+9)] * 0.000181554103123
                      +in[(i+-3)*n+(j+-9)] * -0.000181554103123
                      +in[(i+-3)*n+(j+-8)] * -0.000231481481481
                      +in[(i+-3)*n+(j+-7)] * -0.00030525030525
                      +in[(i+-3)*n+(j+-6)] * -0.000420875420875
                      +in[(i+-3)*n+(j+-5)] * -0.000617283950617
                      +in[(i+-3)*n+(j+-4)] * -0.000992063492063
                      +in[(i+-3)*n+(j+-3)] * -0.00925925925926
                      +in[(i+-3)*n+(j+-2)] * -0.00185185185185
                      +in[(i+-3)*n+(j+-1)] * -0.00185185185185
                      +in[(i+-3)*n+(j+0)] * -0.00185185185185
                      +in[(i+-3)*n+(j+1)] * -0.00185185185185
                      +in[(i+-3)*n+(j+2)] * -0.00185185185185
                      +in[(i+-3)*n+(j+4)] * 0.000992063492063
                      +in[(i+-3)*n+(j+5)] * 0.000617283950617
                      +in[(i+-3)*n+(j+6)] * 0.000420875420875
                      +in[(i+-3)*n+(j+7)] * 0.00030525030525
                      +in[(i+-3)*n+(j+8)] * 0.000231481481481
                      +in[(i+-3)*n+(j+9)] * 0.000181554103123
                      +in[(i+-2)*n+(j+-9)] * -0.000181554103123
                      +in[(i+-2)*n+(j+-8)] * -0.000231481481481
                      +in[(i+-2)*n+(j+-7)] * -0.00030525030525
                      +in[(i+-2)*n+(j+-6)] * -0.000420875420875
                      +in[(i+-2)*n+(j+-5)] * -0.000617283950617
                      +in[(i+-2)*n+(j+-4)] * -0.000992063492063
                      +in[(i+-2)*n+(j+-3)] * -0.00185185185185
                      +in[(i+-2)*n+(j+-2)] * -0.0138888888889
                      +in[(i+-2)*n+(j+-1)] * -0.00462962962963
                      +in[(i+-2)*n+(j+0)] * -0.00462962962963
                      +in[(i+-2)*n+(j+1)] * -0.00462962962963
                      +in[(i+-2)*n+(j+3)] * 0.00185185185185
                      +in[(i+-2)*n+(j+4)] * 0.000992063492063
                      +in[(i+-2)*n+(j+5)] * 0.000617283950617
                      +in[(i+-2)*n+(j+6)] * 0.000420875420875
                      +in[(i+-2)*n+(j+7)] * 0.00030525030525
                      +in[(i+-2)*n+(j+8)] * 0.000231481481481
                      +in[(i+-2)*n+(j+9)] * 0.000181554103123
                      +in[(i+-1)*n+(j+-9)] * -0.000181554103123
                      +in[(i+-1)*n+(j+-8)] * -0.000231481481481
                      +in[(i+-1)*n+(j+-7)] * -0.00030525030525
                      +in[(i+-1)*n+(j+-6)] * -0.000420875420875
                      +in[(i+-1)*n+(j+-5)] * -0.000617283950617
                      +in[(i+-1)*n+(j+-4)] * -0.000992063492063
                      +in[(i+-1)*n+(j+-3)] * -0.00185185185185
                      +in[(i+-1)*n+(j+-2)] * -0.00462962962963
                      +in[(i+-1)*n+(j+-1)] * -0.0277777777778
                      +in[(i+-1)*n+(j+0)] * -0.0277777777778
                      +in[(i+-1)*n+(j+2)] * 0.00462962962963
                      +in[(i+-1)*n+(j+3)] * 0.00185185185185
                      +in[(i+-1)*n+(j+4)] * 0.000992063492063
                      +in[(i+-1)*n+(j+5)] * 0.000617283950617
                      +in[(i+-1)*n+(j+6)] * 0.000420875420875
                      +in[(i+-1)*n+(j+7)] * 0.00030525030525
                      +in[(i+-1)*n+(j+8)] * 0.000231481481481
                      +in[(i+-1)*n+(j+9)] * 0.000181554103123
                      +in[(i+0)*n+(j+-9)] * -0.000181554103123
                      +in[(i+0)*n+(j+-8)] * -0.000231481481481
                      +in[(i+0)*n+(j+-7)] * -0.00030525030525
                      +in[(i+0)*n+(j+-6)] * -0.000420875420875
                      +in[(i+0)*n+(j+-5)] * -0.000617283950617
                      +in[(i+0)*n+(j+-4)] * -0.000992063492063
                      +in[(i+0)*n+(j+-3)] * -0.00185185185185
                      +in[(i+0)*n+(j+-2)] * -0.00462962962963
                      +in[(i+0)*n+(j+-1)] * -0.0277777777778
                      +in[(i+0)*n+(j+1)] * 0.0277777777778
                      +in[(i+0)*n+(j+2)] * 0.00462962962963
                      +in[(i+0)*n+(j+3)] * 0.00185185185185
                      +in[(i+0)*n+(j+4)] * 0.000992063492063
                      +in[(i+0)*n+(j+5)] * 0.000617283950617
                      +in[(i+0)*n+(j+6)] * 0.000420875420875
                      +in[(i+0)*n+(j+7)] * 0.00030525030525
                      +in[(i+0)*n+(j+8)] * 0.000231481481481
                      +in[(i+0)*n+(j+9)] * 0.000181554103123
                      +in[(i+1)*n+(j+-9)] * -0.000181554103123
                      +in[(i+1)*n+(j+-8)] * -0.000231481481481
                      +in[(i+1)*n+(j+-7)] * -0.00030525030525
                      +in[(i+1)*n+(j+-6)] * -0.000420875420875
                      +in[(i+1)*n+(j+-5)] * -0.000617283950617
                      +in[(i+1)*n+(j+-4)] * -0.000992063492063
                      +in[(i+1)*n+(j+-3)] * -0.00185185185185
                      +in[(i+1)*n+(j+-2)] * -0.00462962962963
                      +in[(i+1)*n+(j+0)] * 0.0277777777778
                      +in[(i+1)*n+(j+1)] * 0.0277777777778
                      +in[(i+1)*n+(j+2)] * 0.00462962962963
                      +in[(i+1)*n+(j+3)] * 0.00185185185185
                      +in[(i+1)*n+(j+4)] * 0.000992063492063
                      +in[(i+1)*n+(j+5)] * 0.000617283950617
                      +in[(i+1)*n+(j+6)] * 0.000420875420875
                      +in[(i+1)*n+(j+7)] * 0.00030525030525
                      +in[(i+1)*n+(j+8)] * 0.000231481481481
                      +in[(i+1)*n+(j+9)] * 0.000181554103123
                      +in[(i+2)*n+(j+-9)] * -0.000181554103123
                      +in[(i+2)*n+(j+-8)] * -0.000231481481481
                      +in[(i+2)*n+(j+-7)] * -0.00030525030525
                      +in[(i+2)*n+(j+-6)] * -0.000420875420875
                      +in[(i+2)*n+(j+-5)] * -0.000617283950617
                      +in[(i+2)*n+(j+-4)] * -0.000992063492063
                      +in[(i+2)*n+(j+-3)] * -0.00185185185185
                      +in[(i+2)*n+(j+-1)] * 0.00462962962963
                      +in[(i+2)*n+(j+0)] * 0.00462962962963
                      +in[(i+2)*n+(j+1)] * 0.00462962962963
                      +in[(i+2)*n+(j+2)] * 0.0138888888889
                      +in[(i+2)*n+(j+3)] * 0.00185185185185
                      +in[(i+2)*n+(j+4)] * 0.000992063492063
                      +in[(i+2)*n+(j+5)] * 0.000617283950617
                      +in[(i+2)*n+(j+6)] * 0.000420875420875
                      +in[(i+2)*n+(j+7)] * 0.00030525030525
                      +in[(i+2)*n+(j+8)] * 0.000231481481481
                      +in[(i+2)*n+(j+9)] * 0.000181554103123
                      +in[(i+3)*n+(j+-9)] * -0.000181554103123
                      +in[(i+3)*n+(j+-8)] * -0.000231481481481
                      +in[(i+3)*n+(j+-7)] * -0.00030525030525
                      +in[(i+3)*n+(j+-6)] * -0.000420875420875
                      +in[(i+3)*n+(j+-5)] * -0.000617283950617
                      +in[(i+3)*n+(j+-4)] * -0.000992063492063
                      +in[(i+3)*n+(j+-2)] * 0.00185185185185
                      +in[(i+3)*n+(j+-1)] * 0.00185185185185
                      +in[(i+3)*n+(j+0)] * 0.00185185185185
                      +in[(i+3)*n+(j+1)] * 0.00185185185185
                      +in[(i+3)*n+(j+2)] * 0.00185185185185
                      +in[(i+3)*n+(j+3)] * 0.00925925925926
                      +in[(i+3)*n+(j+4)] * 0.000992063492063
                      +in[(i+3)*n+(j+5)] * 0.000617283950617
                      +in[(i+3)*n+(j+6)] * 0.000420875420875
                      +in[(i+3)*n+(j+7)] * 0.00030525030525
                      +in[(i+3)*n+(j+8)] * 0.000231481481481
                      +in[(i+3)*n+(j+9)] * 0.000181554103123
                      +in[(i+4)*n+(j+-9)] * -0.000181554103123
                      +in[(i+4)*n+(j+-8)] * -0.000231481481481
                      +in[(i+4)*n+(j+-7)] * -0.00030525030525
                      +in[(i+4)*n+(j+-6)] * -0.000420875420875
                      +in[(i+4)*n+(j+-5)] * -0.000617283950617
                      +in[(i+4)*n+(j+-3)] * 0.000992063492063
                      +in[(i+4)*n+(j+-2)] * 0.000992063492063
                      +in[(i+4)*n+(j+-1)] * 0.000992063492063
                      +in[(i+4)*n+(j+0)] * 0.000992063492063
                      +in[(i+4)*n+(j+1)] * 0.000992063492063
                      +in[(i+4)*n+(j+2)] * 0.000992063492063
                      +in[(i+4)*n+(j+3)] * 0.000992063492063
                      +in[(i+4)*n+(j+4)] * 0.00694444444444
                      +in[(i+4)*n+(j+5)] * 0.000617283950617
                      +in[(i+4)*n+(j+6)] * 0.000420875420875
                      +in[(i+4)*n+(j+7)] * 0.00030525030525
                      +in[(i+4)*n+(j+8)] * 0.000231481481481
                      +in[(i+4)*n+(j+9)] * 0.000181554103123
                      +in[(i+5)*n+(j+-9)] * -0.000181554103123
                      +in[(i+5)*n+(j+-8)] * -0.000231481481481
                      +in[(i+5)*n+(j+-7)] * -0.00030525030525
                      +in[(i+5)*n+(j+-6)] * -0.000420875420875
                      +in[(i+5)*n+(j+-4)] * 0.000617283950617
                      +in[(i+5)*n+(j+-3)] * 0.000617283950617
                      +in[(i+5)*n+(j+-2)] * 0.000617283950617
                      +in[(i+5)*n+(j+-1)] * 0.000617283950617
                      +in[(i+5)*n+(j+0)] * 0.000617283950617
                      +in[(i+5)*n+(j+1)] * 0.000617283950617
                      +in[(i+5)*n+(j+2)] * 0.000617283950617
                      +in[(i+5)*n+(j+3)] * 0.000617283950617
                      +in[(i+5)*n+(j+4)] * 0.000617283950617
                      +in[(i+5)*n+(j+5)] * 0.00555555555556
                      +in[(i+5)*n+(j+6)] * 0.000420875420875
                      +in[(i+5)*n+(j+7)] * 0.00030525030525
                      +in[(i+5)*n+(j+8)] * 0.000231481481481
                      +in[(i+5)*n+(j+9)] * 0.000181554103123
                      +in[(i+6)*n+(j+-9)] * -0.000181554103123
                      +in[(i+6)*n+(j+-8)] * -0.000231481481481
                      +in[(i+6)*n+(j+-7)] * -0.00030525030525
                      +in[(i+6)*n+(j+-5)] * 0.000420875420875
                      +in[(i+6)*n+(j+-4)] * 0.000420875420875
                      +in[(i+6)*n+(j+-3)] * 0.000420875420875
                      +in[(i+6)*n+(j+-2)] * 0.000420875420875
                      +in[(i+6)*n+(j+-1)] * 0.000420875420875
                      +in[(i+6)*n+(j+0)] * 0.000420875420875
                      +in[(i+6)*n+(j+1)] * 0.000420875420875
                      +in[(i+6)*n+(j+2)] * 0.000420875420875
                      +in[(i+6)*n+(j+3)] * 0.000420875420875
                      +in[(i+6)*n+(j+4)] * 0.000420875420875
                      +in[(i+6)*n+(j+5)] * 0.000420875420875
                      +in[(i+6)*n+(j+6)] * 0.00462962962963
                      +in[(i+6)*n+(j+7)] * 0.00030525030525
                      +in[(i+6)*n+(j+8)] * 0.000231481481481
                      +in[(i+6)*n+(j+9)] * 0.000181554103123
                      +in[(i+7)*n+(j+-9)] * -0.000181554103123
                      +in[(i+7)*n+(j+-8)] * -0.000231481481481
                      +in[(i+7)*n+(j+-6)] * 0.00030525030525
                      +in[(i+7)*n+(j+-5)] * 0.00030525030525
                      +in[(i+7)*n+(j+-4)] * 0.00030525030525
                      +in[(i+7)*n+(j+-3)] * 0.00030525030525
                      +in[(i+7)*n+(j+-2)] * 0.00030525030525
                      +in[(i+7)*n+(j+-1)] * 0.00030525030525
                      +in[(i+7)*n+(j+0)] * 0.00030525030525
                      +in[(i+7)*n+(j+1)] * 0.00030525030525
                      +in[(i+7)*n+(j+2)] * 0.00030525030525
                      +in[(i+7)*n+(j+3)] * 0.00030525030525
                      +in[(i+7)*n+(j+4)] * 0.00030525030525
                      +in[(i+7)*n+(j+5)] * 0.00030525030525
                      +in[(i+7)*n+(j+6)] * 0.00030525030525
                      +in[(i+7)*n+(j+7)] * 0.00396825396825
                      +in[(i+7)*n+(j+8)] * 0.000231481481481
                      +in[(i+7)*n+(j+9)] * 0.000181554103123
                      +in[(i+8)*n+(j+-9)] * -0.000181554103123
                      +in[(i+8)*n+(j+-7)] * 0.000231481481481
                      +in[(i+8)*n+(j+-6)] * 0.000231481481481
                      +in[(i+8)*n+(j+-5)] * 0.000231481481481
                      +in[(i+8)*n+(j+-4)] * 0.000231481481481
                      +in[(i+8)*n+(j+-3)] * 0.000231481481481
                      +in[(i+8)*n+(j+-2)] * 0.000231481481481
                      +in[(i+8)*n+(j+-1)] * 0.000231481481481
                      +in[(i+8)*n+(j+0)] * 0.000231481481481
                      +in[(i+8)*n+(j+1)] * 0.000231481481481
                      +in[(i+8)*n+(j+2)] * 0.000231481481481
                      +in[(i+8)*n+(j+3)] * 0.000231481481481
                      +in[(i+8)*n+(j+4)] * 0.000231481481481
                      +in[(i+8)*n+(j+5)] * 0.000231481481481
                      +in[(i+8)*n+(j+6)] * 0.000231481481481
                      +in[(i+8)*n+(j+7)] * 0.000231481481481
                      +in[(i+8)*n+(j+8)] * 0.00347222222222
                      +in[(i+8)*n+(j+9)] * 0.000181554103123
                      +in[(i+9)*n+(j+-8)] * 0.000181554103123
                      +in[(i+9)*n+(j+-7)] * 0.000181554103123
                      +in[(i+9)*n+(j+-6)] * 0.000181554103123
                      +in[(i+9)*n+(j+-5)] * 0.000181554103123
                      +in[(i+9)*n+(j+-4)] * 0.000181554103123
                      +in[(i+9)*n+(j+-3)] * 0.000181554103123
                      +in[(i+9)*n+(j+-2)] * 0.000181554103123
                      +in[(i+9)*n+(j+-1)] * 0.000181554103123
                      +in[(i+9)*n+(j+0)] * 0.000181554103123
                      +in[(i+9)*n+(j+1)] * 0.000181554103123
                      +in[(i+9)*n+(j+2)] * 0.000181554103123
                      +in[(i+9)*n+(j+3)] * 0.000181554103123
                      +in[(i+9)*n+(j+4)] * 0.000181554103123
                      +in[(i+9)*n+(j+5)] * 0.000181554103123
                      +in[(i+9)*n+(j+6)] * 0.000181554103123
                      +in[(i+9)*n+(j+7)] * 0.000181554103123
                      +in[(i+9)*n+(j+8)] * 0.000181554103123
                      +in[(i+9)*n+(j+9)] * 0.00308641975309
                      ;
       }
     }
  }

    Grid(int n, std::vector<double> & in, std::vector<double> & out)
        : n(n), in(in), out(out) { }

    int n;
    std::vector<double> & in;
    std::vector<double> & out;
};

